                              1  .module floating40Bit.s
                              2  .area .text
                              3 
                              4 ; uses 50 bytes of RAM
                              5 
                              6 ; This file can be converted with Vide to be gcc assembler compatible!
                              7 ; and thus can be used directly with "C" (gcc6809)
                              8 ;
                              9 ; All internal floating point stuff is based on Microsoft BASIC for 6809.
                             10 ; One source I found: https://github.com/jefftranter/6809/tree/master/sbc/exbasrom
                             11 ;
                             12 ; RAM needed:
                             13 ; except String buffer - needs 48 bytes of storage (can probably be reduced a little bit)
                             14 ; mainly 2 internal FP representations
                             15 ; plus another 3 for "scratch" purposes
                             16 ;
                             17 ; 40 bits float format:
                             18 ; 8 bits exponent (if highest bit set, fp number >=1)
                             19 ; 32 bit mantissa
                             20 ; highest bit of mantissa is sign bit
                             21 ; and allways interpreted as "1" for mantissa
                             22 ; 0 is positive, 1 is negative
                             23 ; EEEE EEEE SMMM MMMM MMMM MMMM MMMM MMMM MMMM MMMM
                             24 ;
                             25 ; ERROR handling is not implmented!!!
                             26 ; if an error occurs this might likely crash
                             27 ; this is due to the fact that I jump to the error handler and simply "return"
                             28 ; regardless of the sub function I may be in!
                             29 ; (but this could easily be fixed... I just don't need it (yet))
                             30 ;
                             31 ; functions avaiable from C
                             32 ;void initFP(); // must be called once!
                             33 ;void subF(unsigned char *subFrom, unsigned char *subWhat, unsigned char *out);
                             34 ;void addF(unsigned char *add1, unsigned char *add2, unsigned char *out);
                             35 ;void mulF(unsigned char *mul1, unsigned char *mul2, unsigned char *out);
                             36 ;void intF(unsigned char *in, unsigned char *out);
                             37 ;void mulIF(unsigned long int mul1, unsigned char *mul2, unsigned char *out);
                             38 ;void addIF(unsigned long int add1, unsigned char *add2, unsigned char *out);
                             39 ;unsigned long int toInt(unsigned char *in);
                             40 ;void fToStr(unsigned char *f, unsigned char *buffer);
                             41 ;
                             42 ; (I did not need "div" functions yet - but they can easily be derived from the below listed "internal" functions)
                             43 ;
                             44 ; Except for the string buffer all 
                             45 ; unsigned char * 
                             46 ; variables are 5 byte of unsigned char (40 bit)
                             47 ; and these represent "packed" floating point numbers
                             48 ;
                             49 ; based on "internal" functions
                             50 ; atoF0(y)
                             51 ; F0toa(u) U = StringBuffer; destroys F0; buffer 0 terminated
                             52 ; packedToF0(x)
                             53 ; packedToF1(x)
                             54 ; F0toF1()
                             55 ; F1toF0()
                             56 ; divF1byF0() result in _FPA0
                             57 ; mulF0x(x) result in _FPA0
                             58 ; subF0From(x) result in _FPA0
                             59 ; addF0To(x) result in _FPA0
                             60 ; mulF0F1() result in _FPA0
                             61 ; addF0ToF1() result in _FPA0
                             62 ; subF0FromF1() result in _FPA0
                             63 ; F0ToPacked result in _FPA0
                             64 ; F0toXPacked(x)
                             65 ; DToF0 convert integer in D to float
                             66 ; F0ToD convert integer parts from float to D
                             67 ;
                             68 ; insert your variables (RAM usage) in the BSS section
                             69                     .area .bss      
                             70 
                             71 
                             72 ; Vars moved to "global"
                             73 
                             74 
                             75 ;STRBUF              RMB      41                           ; STRING BUFFER 
                     0020    76 SPACE               =      0x20                          ; SPACE (BLANK) 
                             77 ; PSEUDO OPS
                     008C    78 SKP2                =      0x8C                          ; OP CODE OF CMPX # - SKIP TWO BYTES 
                             79                     .area .text    
                             80 ;// TODO!!!! 
                             81  .globl ERROR_HANDLER
   0000                      82 ERROR_HANDLER: 
                             83  .globl SYNTAX_ERROR
   0000                      84 SYNTAX_ERROR: 
   0000 7E 00 00      [ 4]   85  jmp _floatError
   0003 39            [ 5]   86                     rts                                   ; this might lead to errors, because we don't clean the stack! 
                             87 ; ERROR MESSAGES AND THEIR NUMBERS AS USED INTERNALLY
                             88 ;LABAF     FCC  "NF"           ; 0 NEXT WITHOUT FOR
                             89 ;          FCC  "SN"           ; 1 SYNTAX ERROR
                             90 ;          FCC  "RG"           ; 2 RETURN WITHOUT GOSUB
                             91 ;          FCC  "OD"           ; 3 OUT OF DATA
                             92 ;          FCC  "FC"           ; 4 ILLEGAL FUNCTION CALL
                             93 ;          FCC  "OV"           ; 5 OVERFLOW
                             94 ;          FCC  "OM"           ; 6 OUT OF MEMORY
                             95 ;          FCC  "UL"           ; 7 UNDEFINED LINE NUMBER
                             96 ;          FCC  "BS"           ; 8 BAD SUBSCRIPT
                             97 ;          FCC  "DD"           ; 9 REDIMENSIONED ARRAY
                             98 ;          FCC  "/0"           ; 10 DIVISION BY ZERO
                             99 ;          FCC  "ID"           ; 11 ILLEGAL DIRECT STATEMENT
                            100 ;          FCC  "TM"           ; 12 TYPE MISMATCH
                            101 ;          FCC  "OS"           ; 13 OUT OF STRING SPACE
                            102 ;          FCC  "LS"           ; 14 STRING TOO LONG
                            103 ;          FCC  "ST"           ; 15 STRING FORMULA TOO COMPLEX
                            104 ;          FCC  "CN"           ; 16 CAN'T CONTINUE
                            105 ;          FCC  "FD"           ; 17 BAD FILE DATA
                            106 ;          FCC  "AO"           ; 18 FILE ALREADY OPEN
                            107 ;          FCC  "DN"           ; 19 DEVICE NUMBER ERROR
                            108 ;          FCC  "IO"           ; 20 I/O ERROR
                            109 ;          FCC  "FM"           ; 21 BAD FILE MODE
                            110 ;          FCC  "NO"           ; 22 FILE NOT OPEN
                            111 ;          FCC  "IE"           ; 23 INPUT PAST END OF FILE
                            112 ;          FCC  "DS"           ; 24 DIRECT STATEMENT IN FILE
                            113 ;* ADDITIONAL ERROR MESSAGES ADDED BY EXTENDED BASIC
                            114 ;L890B     FCC  "UF"           ; 25 UNDEFINED FUNCTION (FN) CALL
                            115 ;L890D     FCC  "NE"           ; 26 FILE NOT FOUND
                            116 
                            117 
                            118 
                            119 ;----------------------
                            120 ; "C" callable
                            121 ;----------------------
                            122  .globl _initFP
   0004                     123 _initFP: 
   0004 7F 00 00      [ 7]  124                     clr      _FPCARY                       ; this must be initialized before first FP usage 
   0007 39            [ 5]  125                     rts      
                            126 
                            127 ; zero terminated string
                            128 ; fToStr(unsigned char [] float, to unsigned char [] buffer)
                            129  .globl _fToStr
   0008                     130 _fToStr: 
   0008 BD 03 50      [ 8]  131                     jsr      packedToF0 
   000B EE 62         [ 6]  132                     ldu      2,s 
   000D 7E 05 5C      [ 4]  133                     jmp      F0toa 
                            134  .globl _fToStr2
   0010                     135 _fToStr2: 
   0010 33 84         [ 4]  136                     leau      ,x 
   0012 7E 05 5C      [ 4]  137                     jmp      F0toa 
                            138 
                            139 ; mulIF(signed int16, unsigned char [] pointer1, to unsigned char [] pointer2)
                            140  .globl _mulIF
   0015                     141 _mulIF: 
   0015 1F 10         [ 6]  142                     tfr      x,d 
   0017 8D 53         [ 7]  143                     bsr      DToF0                        ;convert integer in D to float 
   0019 AE 62         [ 6]  144                     ldx      2,s 
   001B BD 02 45      [ 8]  145                     jsr      mulF0x                       ; (x) result in _FPA0 
   001E AE 64         [ 6]  146                     ldx      4,s 
   0020 7E 00 C1      [ 4]  147                     jmp      F0toXPacked                  ; 
                            148 
                            149 ; mulF(to unsigned char [] pointer1, to unsigned char [] pointer2, to unsigned char [] pointer3)
                            150  .globl _mulF
   0023                     151 _mulF: 
   0023 BD 03 50      [ 8]  152                     jsr      packedToF0 
   0026 AE 62         [ 6]  153                     ldx      2,s 
   0028 BD 02 45      [ 8]  154                     jsr      mulF0x 
   002B AE 64         [ 6]  155                     ldx      4,s 
   002D 7E 00 C1      [ 4]  156                     jmp      F0toXPacked 
                            157 
                            158 ; addF(to unsigned char [] pointer1, to unsigned char [] pointer2, to unsigned char [] pointer3)
                            159  .globl _addF
   0030                     160 _addF: 
   0030 BD 03 50      [ 8]  161                     jsr      packedToF0 
   0033 AE 62         [ 6]  162                     ldx      2,s 
   0035 BD 00 FD      [ 8]  163                     jsr      addF0To 
   0038 AE 64         [ 6]  164                     ldx      4,s 
   003A 7E 00 C1      [ 4]  165                     jmp      F0toXPacked 
                            166 
                            167 ; addF(signed int16, unsigned char [] pointer1, to unsigned char [] pointer2)
                            168  .globl _addIF
   003D                     169 _addIF: 
   003D 1F 10         [ 6]  170                     tfr      x,d 
   003F 8D 2B         [ 7]  171                     bsr      DToF0                        ;convert integer in D to float 
   0041 AE 62         [ 6]  172                     ldx      2,s 
   0043 BD 00 FD      [ 8]  173                     jsr      addF0To 
   0046 AE 64         [ 6]  174                     ldx      4,s 
   0048 7E 00 C1      [ 4]  175                     jmp      F0toXPacked 
                            176 
                            177 ; pointer3 = pointer1 - pointer2
                            178 ; subF(to unsigned char [] pointer1, to unsigned char [] pointer2, to unsigned char [] pointer3)
                            179  .globl _subF
   004B                     180 _subF: 
   004B BD 02 D1      [ 8]  181                     jsr      packedToF1 
   004E AE 62         [ 6]  182                     ldx      2,s 
   0050 BD 03 50      [ 8]  183                     jsr      packedToF0 
   0053 17 00 8C      [ 9]  184                     lbsr      subF0FromF1 
   0056 AE 64         [ 6]  185                     ldx      4,s 
   0058 20 67         [ 3]  186                     bra      F0toXPacked 
                            187 
                            188 ; intFF(to unsigned char [] pointer1, to unsigned char [] pointer2)
                            189  .globl _intF
   005A                     190 _intF: 
   005A BD 03 50      [ 8]  191  jsr      packedToF0 
   005D BD 04 5A      [ 8]  192  jsr _toInt2
   0060 AE 62         [ 6]  193                     ldx      2,s 
   0062 20 5D         [ 3]  194                     bra      F0toXPacked 
                            195 
                            196 
                            197  
                            198 
                            199 ; obviously only makes sense if the result of the float is less then 65536
                            200 ;int16 bit from F: x = toInt(to unsigned char [] pointer1)
                            201  .globl _toInt
   0064                     202 _toInt: 
   0064 BD 03 50      [ 8]  203                     jsr      packedToF0 
   0067 8D 24         [ 7]  204                     bsr      F0ToD 
   0069 1F 01         [ 6]  205                     tfr      d,x 
   006B 39            [ 5]  206                     rts      
                            207 
                            208 
                            209 ;//////////////////////////////////////////////////
                            210 ; "internal" functions follow
                            211 ; other interna functions are "relabled" MS BASIC functions
                            212 ; see below
                            213 ;//////////////////////////////////////////////////
                            214 ; always signed!
                            215 ; 16 bit
                            216  .globl DToF0
   006C                     217 DToF0: 
   006C FD 00 00      [ 6]  218                     std      _FPA0 
   006F C6 90         [ 2]  219                     LDB      #0x88+8                       ; EXPONENT REQUIRED IF _FPA0 IS TO BE AN INTEGER 
                            220                                                           ; this is for CARRY flag only - which is tested later on! 
   0071 B6 00 00      [ 5]  221                     LDA      _FPA0                         ; GET MS BYTE OF MANTISSA 
   0074 80 80         [ 2]  222                     SUBA     #0x80                         ; SET CARRY IF POSITIVE MANTISSA 
   0076 F7 00 00      [ 5]  223                     STB      _FP0EXP                       ; SAVE EXPONENT 
   0079 CC 00 00      [ 3]  224                     LDD      #0                           ; * ZERO OUT ACCD AND 
   007C FD 00 02      [ 6]  225                     STD      _FPA0+2                       ; * BOTTOM HALF OF _FPA0 
   007F B7 00 00      [ 5]  226                     STA      _FPSBYT                       ; CLEAR SUB BYTE 
   0082 B7 00 00      [ 5]  227                     STA      _FP0SGN                       ; CLEAR SIGN OF _FPA0 MANTISSA 
   0085 7E 01 67      [ 4]  228                     JMP      LBA18                        ; GO NORMALIZE _FPA0 
                            229 
   0088 90 80 00 00 00      230 LB3DF:     .byte  0x90,0x80,0x00,0x00,0x00 ; * FLOATING POINT -32768
                            231 
                            232  .globl F0ToD
   008D                     233 F0ToD: 
                            234 ;                    jsr      LBCC8 
                            235 ;                    ldd      _FPA0+2 
                            236 ;                    rts      
   008D                     237 INTCNV:
   008D B6 00 00      [ 5]  238           LDA  _FP0EXP         ; GET FPA0 EXPONENT
   0090 81 90         [ 2]  239           CMPA #0x90           ; * COMPARE TO 32768 - LARGEST INTEGER EXPONENT AND
   0092 25 0A         [ 3]  240           BCS  LB3FE          ; * BRANCH IF FPA0 < 32768
   0094 8E 00 88      [ 3]  241           LDX  #LB3DF         ; POINT X TO FP VALUE OF -32768
   0097 BD 03 F4      [ 8]  242           JSR  LBC96          ; COMPARE -32768 TO FPA0
   009A 10 26 00 07   [ 6]  243           lBNE  LB44A
   009E                     244 LB3FE:
   009E BD 04 2D      [ 8]  245           JSR  LBCC8          ; CONVERT FPA0 TO A TWO BYTE INTEGER
   00A1 FC 00 02      [ 6]  246           LDD  _FPA0+2         ; GET THE INTEGER
   00A4 39            [ 5]  247           RTS
                            248 
                            249 
   00A5                     250 LB44A:
   00A5 C6 08         [ 2]  251      LDB  #4*2           ; 'ILLEGAL FUNCTION CALL'
   00A7 7E 00 00      [ 4]  252      jmp ERROR_HANDLER          ; 'FC' ERROR IF NOT =
                            253 
                            254 
                            255 
                            256 
                            257 
                            258 
                            259 
                            260 
                            261 
                            262 
                            263 
                            264 
                            265 
                            266 
                            267 
                            268 
                            269 
                            270 
                            271 
                            272 
                            273 
                            274 
                            275 
                            276 
                            277 
                            278 
                            279 
                            280 
                            281 
                            282 
                            283 ;------------------------------
                            284 ; MICROSOFT BASIC routines follow!
                            285 ;------------------------------
                            286 ; this "simulates" a BASIC input queue
                            287 ; and is used when converting Str to float
                            288  .globl GETCCH
   00AA                     289 GETCCH: 
                            290  .globl GETNCH
   00AA                     291 GETNCH: 
   00AA A6 A0         [ 6]  292                     lda      ,y+ 
                            293 ; SET CARRY IF NUMERIC - RETURN WITH
                            294 ; ZERO FLAG SET IF ACCA = 0 OR 3A(:) - END
                            295 ; OF BASIC LINE OR SUB LINE
                            296  .globl BROMHK
   00AC                     297 BROMHK: 
   00AC 81 3A         [ 2]  298                     CMPA     # '9+1                      ; IS THIS CHARACTER >=(ASCII 9)+1?
   00AE 24 04         [ 3]  299                     BHS      LAA28                        ; BRANCH IF > 9; Z SET IF = COLON 
                            300  .globl LAA24
   00B0                     301 LAA24: 
   00B0 80 30         [ 2]  302                     SUBA     # '0                        ; * SET CARRY IF
   00B2 80 D0         [ 2]  303                     SUBA     #- '0                       ; * CHARACTER > ASCII 0
                            304  .globl RTS0
   00B4                     305 RTS0: 
                            306  .globl LAA28
   00B4 39            [ 5]  307 LAA28:               RTS      
                            308 
                            309 ; SET CARRY IF NOT UPPER CASE ALPHA
                            310  .globl LB3A2
   00B5                     311 LB3A2: 
   00B5 81 41         [ 2]  312                     CMPA     # 'A            ; * CARRY SET IF < 'A
   00B7 25 04         [ 3]  313                     BCS      LB3AA                        ; * 
   00B9 80 5B         [ 2]  314                     SUBA     # 'Z+1                      ; =
                            315 ;                   *        SUBA #-( 'Z+1)       ; = CARRY CLEAR IF <= 'Z'
   00BB 80 A5               316                     .byte      0x80,0xA5 
                            317  .globl LB3AA
   00BD 39            [ 5]  318 LB3AA:               RTS      
                            319 
                            320 ; FLOATING POINT MATH PACKAGE
                            321 ; converts _FPA0 to a packed representation
                            322 ; uses FPA as target address
                            323  .globl F0ToPacked
   00BE                     324 F0ToPacked: 
   00BE 8E FF FF      [ 3]  325                     ldx      #_FPA0-1 
                            326 ; uses X as target pointer
                            327  .globl F0toXPacked
   00C1                     328 F0toXPacked: 
   00C1 B6 00 00      [ 5]  329                     lda      _FP0EXP 
   00C4 A7 84         [ 4]  330                     sta      ,x 
   00C6 F6 00 00      [ 5]  331                     ldb      _FPA0 
   00C9 B6 00 00      [ 5]  332                     lda      _FP0SGN                       ; load sign 
   00CC 2B 02         [ 3]  333                     bmi      negative                     ; if negative the mantisse should be ok with a set high bit 
   00CE C4 7F         [ 2]  334                     andb     #0x7f                         ; remove highest bit 
                            335  .globl negative
   00D0                     336 negative: 
   00D0 E7 01         [ 5]  337                     stb      1,x                          ; and save 
   00D2 FC 00 01      [ 6]  338                     ldd      _FPA0+1 
   00D5 ED 02         [ 6]  339                     std      2,x                          ; 
   00D7 B6 00 03      [ 5]  340                     lda      _FPA0+3 
   00DA A7 04         [ 5]  341                     sta      4,x                          ; 
   00DC 39            [ 5]  342                     rts      
                            343 
                            344 ; ADD .5 TO _FPA0
                            345  .globl LB9B4
   00DD 8E 06 52      [ 3]  346 LB9B4:               LDX      #LBEC0                       ; FLOATING POINT CONSTANT (.5) 
   00E0 20 1B         [ 3]  347                     BRA      LB9C2                        ; ADD .5 TO _FPA0 
                            348 
                            349  .globl subF0FromF1
   00E2                     350 subF0FromF1: 
   00E2 B6 00 00      [ 5]  351                     LDA      _FP1EXP                       ; * PUT IN EXPONENT OF _FPA1 
   00E5 F6 00 00      [ 5]  352                     LDB      _FP0EXP                       ; GET EXPONENT OF _FPA0 
   00E8 20 03         [ 3]  353                     bra      LB9BC 
                            354 
                            355 ; SUBTRACT _FPA0 FROM FP NUMBER POINTED
                            356 ; TO BY (X), LEAVE RESULT IN _FPA0
                            357  .globl subF0From
   00EA                     358 subF0From: 
                            359  .globl LB9B9
   00EA BD 02 D1      [ 8]  360 LB9B9:               JSR      LBB2F                        ; COPY PACKED FP DATA FROM (X) TO _FPA1 
                            361 ; ARITHMETIC OPERATION (-) JUMPS HERE - SUBTRACT _FPA0 FROM _FPA1 (ENTER
                            362 ; WITH EXPONENT OF _FPA0 IN ACCB AND EXPONENT OF _FPA1 IN ACCA)
                            363  .globl LB9BC
   00ED 73 00 00      [ 7]  364 LB9BC:               COM      _FP0SGN                       ; CHANGE MANTISSA SIGN OF _FPA0 
   00F0 73 00 00      [ 7]  365                     COM      _RESSGN                       ; REVERSE RESULT SIGN FLAG 
   00F3 20 0B         [ 3]  366                     BRA      LB9C5                        ; GO ADD _FPA1 AND _FPA0 
                            367 
                            368  .globl addF0toF1
   00F5                     369 addF0toF1: 
   00F5 B6 00 00      [ 5]  370                     LDA      _FP1EXP                       ; * PUT IN EXPONENT OF _FPA1 
   00F8 F6 00 00      [ 5]  371                     LDB      _FP0EXP                       ; GET EXPONENT OF _FPA0 
   00FB 20 03         [ 3]  372                     bra      LB9C5 
                            373 
                            374 ; ADD FP NUMBER POINTED TO BY
                            375 ; (X) TO _FPA0 - LEAVE RESULT IN _FPA0
                            376  .globl addF0To
   00FD                     377 addF0To: 
                            378  .globl LB9C2
   00FD BD 02 D1      [ 8]  379 LB9C2:               JSR      LBB2F                        ; UNPACK PACKED FP DATA FROM (X) TO 
                            380 ;         _FPA1                                            ; RETURN EXPONENT OF _FPA1 IN ACCA
                            381 ; ARITHMETIC OPERATION (+) JUMPS HERE - ADD _FPA0 TO
                            382  .globl LB9C5
   0100 5D            [ 2]  383 LB9C5:               TSTB                                  ; CHECK EXPONENT OF _FPA0 
   0101 10 27 02 88   [ 6]  384                     LBEQ     LBC4A                        ; COPY _FPA1 TO _FPA0 IF _FPA0 = 
   0105 8E 00 00      [ 3]  385                     LDX      #_FP1EXP                      ; POINT X TO _FPA1 
                            386  .globl LB9CD
   0108 1F 89         [ 6]  387 LB9CD:               TFR      A,B                          ; PUT EXPONENT OF _FPA1 INTO ACCB 
   010A 5D            [ 2]  388                     TSTB                                  ; CHECK EXPONENT 
   010B 27 A7         [ 3]  389                     BEQ      RTS0                         ;LBA3E ; RETURN IF EXPONENT = 0 (ADDING 0 TO _FPA0) 
   010D F0 00 00      [ 5]  390                     SUBB     _FP0EXP                       ; SUBTRACT EXPONENT OF _FPA0 FROM EXPONENT OF _FPA1 
   0110 10 27 00 86   [ 6]  391                     LBEQ     LBA3F                        ; BRANCH IF EXPONENTS ARE EQUAL 
   0114 25 0D         [ 3]  392                     BCS      LB9E2                        ; BRANCH IF EXPONENT _FPA0 > _FPA1 
   0116 B7 00 00      [ 5]  393                     STA      _FP0EXP                       ; REPLACE _FPA0 EXPONENT WITH _FPA1 EXPONENT 
   0119 B6 00 00      [ 5]  394                     LDA      _FP1SGN                       ; * REPLACE _FPA0 MANTISSA SIGN 
   011C B7 00 00      [ 5]  395                     STA      _FP0SGN                       ; * WITH _FPA1 MANTISSA SIGN 
   011F 8E 00 00      [ 3]  396                     LDX      #_FP0EXP                      ; POINT X TO _FPA0 
   0122 50            [ 2]  397                     NEGB                                  ; NEGATE DIFFERENCE OF EXPONENTS 
                            398  .globl LB9E2
   0123 C1 F8         [ 2]  399 LB9E2:               CMPB     #-8                          ; TEST DIFFERENCE OF EXPONENTS 
   0125 2F 73         [ 3]  400                     BLE      LBA3F                        ; BRANCH IF DIFFERENCE OF EXPONENTS <= 8 
   0127 4F            [ 2]  401                     CLRA                                  ; CLEAR OVERFLOW BYTE 
   0128 64 01         [ 7]  402                     LSR      1,X                          ; SHIFT MS BYTE OF MANTISSA; BIT 7 = 0 
   012A BD 02 30      [ 8]  403                     JSR      LBABA                        ; GO SHIFT MANTISSA OF (X) TO THE RIGHT (B) TIMES 
                            404  .globl LB9EC
   012D F6 00 00      [ 5]  405 LB9EC:               LDB      _RESSGN                       ; GET SIGN FLAG 
   0130 2A 0B         [ 3]  406                     BPL      LB9FB                        ; BRANCH IF _FPA0 AND _FPA1 SIGNS ARE THE SAME 
   0132 63 01         [ 7]  407                     COM      1,X                          ; * COMPLEMENT MANTISSA POINTED 
   0134 63 02         [ 7]  408                     COM      2,X                          ; * TO BY (X) THE 
   0136 63 03         [ 7]  409                     COM      3,X                          ; * ADCA BELOW WILL 
   0138 63 04         [ 7]  410                     COM      4,X                          ; * CONVERT THIS OPERATION 
   013A 43            [ 2]  411                     COMA                                  ; * INTO A NEG (MANTISSA) 
   013B 89 00         [ 2]  412                     ADCA     #0                           ; ADD ONE TO ACCA - COMA ALWAYS SETS THE CARRY FLAG 
                            413 ; THE PREVIOUS TWO BYTES MAY BE REPLACED BY A NEGA
                            414 ;
                            415 ; ADD MANTISSAS OF _FPA0 AND _FPA1, PUT RESULT IN _FPA0
                            416  .globl LB9FB
   013D B7 00 00      [ 5]  417 LB9FB:               STA      _FPSBYT                       ; SAVE FPA SUB BYTE 
   0140 B6 00 03      [ 5]  418                     LDA      _FPA0+3                       ; * ADD LS BYTE 
   0143 B9 00 03      [ 5]  419                     ADCA     _FPA1+3                       ; * OF MANTISSA 
   0146 B7 00 03      [ 5]  420                     STA      _FPA0+3                       ; SAVE IN _FPA0 LSB 
   0149 B6 00 02      [ 5]  421                     LDA      _FPA0+2                       ; * ADD NEXT BYTE 
   014C B9 00 02      [ 5]  422                     ADCA     _FPA1+2                       ; * OF MANTISSA 
   014F B7 00 02      [ 5]  423                     STA      _FPA0+2                       ; SAVE IN _FPA0 
   0152 B6 00 01      [ 5]  424                     LDA      _FPA0+1                       ; * ADD NEXT BYTE 
   0155 B9 00 01      [ 5]  425                     ADCA     _FPA1+1                       ; * OF MANTISSA 
   0158 B7 00 01      [ 5]  426                     STA      _FPA0+1                       ; SAVE IN _FPA0 
   015B B6 00 00      [ 5]  427                     LDA      _FPA0                         ; * ADD MS BYTE 
   015E B9 00 00      [ 5]  428                     ADCA     _FPA1                         ; * OF MANTISSA 
   0161 B7 00 00      [ 5]  429                     STA      _FPA0                         ; SAVE IN _FPA0 
   0164 5D            [ 2]  430                     TSTB                                  ; TEST SIGN FLAG 
   0165 2A 58         [ 3]  431                     BPL      LBA5C                        ; BRANCH IF _FPA0 & _FPA1 SIGNS WERE ALIKE 
                            432  .globl LBA18
   0167 25 02         [ 3]  433 LBA18:               BCS      LBA1C                        ; BRANCH IF POSITIVE MANTISSA 
   0169 8D 78         [ 7]  434                     BSR      LBA79                        ; NEGATE _FPA0 MANTISSA 
                            435 ; NORMALIZE _FPA0
                            436  .globl LBA1C
   016B 5F            [ 2]  437 LBA1C:               CLRB                                  ; CLEAR TEMPORARY EXPONENT ACCUMULATOR 
                            438  .globl LBA1D
   016C B6 00 00      [ 5]  439 LBA1D:               LDA      _FPA0                         ; TEST MSB OF MANTISSA 
   016F 26 3F         [ 3]  440                     BNE      LBA4F                        ; BRANCH IF <> 0 
   0171 B6 00 01      [ 5]  441                     LDA      _FPA0+1                       ; * IF THE MSB IS 
   0174 B7 00 00      [ 5]  442                     STA      _FPA0                         ; * 0, THEN SHIFT THE 
   0177 B6 00 02      [ 5]  443                     LDA      _FPA0+2                       ; * MANTISSA A WHOLE BYTE 
   017A B7 00 01      [ 5]  444                     STA      _FPA0+1                       ; * AT A TIME. THIS 
   017D B6 00 03      [ 5]  445                     LDA      _FPA0+3                       ; * IS FASTER THAN ONE 
   0180 B7 00 02      [ 5]  446                     STA      _FPA0+2                       ; * BIT AT A TIME 
   0183 B6 00 00      [ 5]  447                     LDA      _FPSBYT                       ; * BUT USES MORE MEMORY. 
   0186 B7 00 03      [ 5]  448                     STA      _FPA0+3                       ; * _FPSBYT, THE CARRY IN 
   0189 7F 00 00      [ 7]  449                     CLR      _FPSBYT                       ; * BYTE, REPLACES THE MATISSA LSB. 
   018C CB 08         [ 2]  450                     ADDB     #8                           ; SHIFTING ONE BYTE = 8 BIT SHIFTS; ADD 8 TO EXPONENT 
   018E C1 28         [ 2]  451                     CMPB     #5*8                         ; CHECK FOR 5 SHIFTS 
   0190 2D DA         [ 3]  452                     BLT      LBA1D                        ; BRANCH IF < 5 SHIFTS, IF > 5, THEN MANTISSA = 0 
                            453  .globl LBA39
   0192 4F            [ 2]  454 LBA39:               CLRA                                  ; A ZERO EXPONENT = 0 FLOATING POINT 
                            455  .globl LBA3A
   0193 B7 00 00      [ 5]  456 LBA3A:               STA      _FP0EXP                       ; ZERO OUT THE EXPONENT 
   0196 B7 00 00      [ 5]  457                     STA      _FP0SGN                       ; ZERO OUT THE MANTISSA SIGN 
                            458  .globl LBA3E
   0199 39            [ 5]  459 LBA3E:               RTS      
                            460 
                            461  .globl LBA3F
   019A BD 02 23      [ 8]  462 LBA3F:               JSR      LBAAE                        ; SHIFT _FPA0 MANTISSA TO RIGHT 
   019D 5F            [ 2]  463                     CLRB                                  ; CLEAR CARRY FLAG 
   019E 20 8D         [ 3]  464                     BRA      LB9EC 
                            465 
                            466 ; SHIFT _FPA0 LEFT ONE BIT UNTIL BIT 7
                            467 ; OF MATISSA MS BYTE = 1
                            468  .globl LBA44
   01A0 5C            [ 2]  469 LBA44:               INCB                                  ; ADD ONE TO EXPONENT ACCUMULATOR 
   01A1 78 00 00      [ 7]  470                     ASL      _FPSBYT                       ; SHIFT SUB BYTE ONE LEFT 
   01A4 79 00 03      [ 7]  471                     ROL      _FPA0+3                       ; SHIFT LS BYTE 
   01A7 79 00 02      [ 7]  472                     ROL      _FPA0+2                       ; SHIFT NS BYTE 
   01AA 79 00 01      [ 7]  473                     ROL      _FPA0+1                       ; SHIFT NS BYTE 
   01AD 79 00 00      [ 7]  474                     ROL      _FPA0                         ; SHIFT MS BYTE 
                            475  .globl LBA4F
   01B0 2A EE         [ 3]  476 LBA4F:               BPL      LBA44                        ; BRANCH IF NOT YET NORMALIZED 
   01B2 B6 00 00      [ 5]  477                     LDA      _FP0EXP                       ; GET CURRENT EXPONENT 
   01B5 34 04         [ 6]  478                     PSHS     B                            ; SAVE EXPONENT MODIFIER CAUSED BY NORMALIZATION 
   01B7 A0 E0         [ 6]  479                     SUBA     ,S+                          ; SUBTRACT ACCUMULATED EXPONENT MODIFIER 
   01B9 B7 00 00      [ 5]  480                     STA      _FP0EXP                       ; SAVE AS NEW EXPONENT 
   01BC 23 D4         [ 3]  481                     BLS      LBA39                        ; SET _FPA0 = 0 IF THE NORMALIZATION CAUSED 
                            482 ;         MORE OR EQUAL NUMBER OF LEFT SHIFTS THAN THE
                            483 ;         SIZE OF THE EXPONENT
                            484 ; checked, used and ok
   01BE 8C                  485                     .byte      SKP2                         ; SKIP 2 BYTES 
                            486  .globl LBA5C
   01BF 25 0A         [ 3]  487 LBA5C:               BCS      LBA66                        ; BRANCH IF MANTISSA OVERFLOW 
   01C1 78 00 00      [ 7]  488                     ASL      _FPSBYT                       ; SUB BYTE BIT 7 TO CARRY - USE AS ROUND-OFF 
                            489 ;                                                         ; FLAG (TRUNCATE THE REST OF SUB BYTE)
   01C4 86 00         [ 2]  490                     LDA      #0                           ; CLRA, BUT DO NOT CHANGE CARRY FLAG 
   01C6 B7 00 00      [ 5]  491                     STA      _FPSBYT                       ; CLEAR THE SUB BYTE 
   01C9 20 11         [ 3]  492                     BRA      LBA72                        ; GO ROUND-OFF RESULT 
                            493 
                            494  .globl LBA66
   01CB 7C 00 00      [ 7]  495 LBA66:               INC      _FP0EXP                       ; INCREMENT EXPONENT - MULTIPLY BY 2 
   01CE 27 35         [ 3]  496                     BEQ      LBA92                        ; OVERFLOW ERROR IF CARRY PAST 0xFF 
   01D0 76 00 00      [ 7]  497                     ROR      _FPA0                         ; * SHIFT MANTISSA 
   01D3 76 00 01      [ 7]  498                     ROR      _FPA0+1                       ; * ONE TO 
   01D6 76 00 02      [ 7]  499                     ROR      _FPA0+2                       ; * THE RIGHT - 
   01D9 76 00 03      [ 7]  500                     ROR      _FPA0+3                       ; * DIVIDE BY TWO 
                            501  .globl LBA72
   01DC 24 04         [ 3]  502 LBA72:               BCC      LBA78                        ; BRANCH IF NO ROUND-OFF NEEDED 
   01DE 8D 12         [ 7]  503                     BSR      LBA83                        ; ADD ONE TO MANTISSA - ROUND OFF 
   01E0 27 E9         [ 3]  504                     BEQ      LBA66                        ; BRANCH iF OVERFLOW - MANTISSA = 0 
                            505  .globl LBA78
   01E2 39            [ 5]  506 LBA78:               RTS      
                            507 
                            508 ; NEGATE _FPA0 MANTISSA
                            509  .globl LBA79
   01E3 73 00 00      [ 7]  510 LBA79:               COM      _FP0SGN                       ; TOGGLE SIGN OF MANTISSA 
                            511  .globl LBA7B
   01E6 73 00 00      [ 7]  512 LBA7B:               COM      _FPA0                         ; * COMPLEMENT ALL 4 MANTISSA BYTES 
   01E9 73 00 01      [ 7]  513                     COM      _FPA0+1                       ; * 
   01EC 73 00 02      [ 7]  514                     COM      _FPA0+2                       ; * 
   01EF 73 00 03      [ 7]  515                     COM      _FPA0+3                       ; * 
                            516 ; ADD ONE TO _FPA0 MANTISSA
                            517  .globl LBA83
   01F2 BE 00 02      [ 6]  518 LBA83:               LDX      _FPA0+2                       ; * GET BOTTOM 2 MANTISSA 
   01F5 30 01         [ 5]  519                     LEAX     1,X                          ; * BYTES, ADD ONE TO 
   01F7 BF 00 02      [ 6]  520                     STX      _FPA0+2                       ; * THEM AND SAVE THEM 
   01FA 26 08         [ 3]  521                     BNE      LBA91                        ; BRANCH IF NO OVERFLOW 
   01FC BE 00 00      [ 6]  522                     LDX      _FPA0                         ; * IF OVERFLOW ADD ONE 
   01FF 30 01         [ 5]  523                     LEAX     1,X                          ; * TO TOP 2 MANTISSA 
   0201 BF 00 00      [ 6]  524                     STX      _FPA0                         ; * BYTES AND SAVE THEM 
                            525  .globl LBA91
   0204 39            [ 5]  526 LBA91:               RTS      
                            527 
                            528  .globl LBA92
   0205 C6 0A         [ 2]  529 LBA92:               LDB      #2*5                         ; OV' OVERFLOW ERROR 
   0207 7E 00 00      [ 4]  530                     JMP      ERROR_HANDLER                ; PROCESS AN ERROR 
                            531 
                            532  .globl LBA97
   020A 8E FF FF      [ 3]  533 LBA97:               LDX      #_FPA2-1                      ; POINT X TO _FPA2 
                            534 ; SHIFT FPA POINTED TO BY (X) TO
                            535 ; THE RIGHT -(B) TIMES. EXIT WITH
                            536 ; ACCA CONTAINING DATA SHIFTED OUT
                            537 ; TO THE RIGHT (SUB BYTE) AND THE DATA
                            538 ; SHIFTED IN FROM THE LEFT WILL COME FROM _FPCARY
                            539  .globl LBA9A
   020D A6 04         [ 5]  540 LBA9A:               LDA      4,X                          ; GET LS BYTE OF MANTISSA (X) 
   020F B7 00 00      [ 5]  541                     STA      _FPSBYT                       ; SAVE IN FPA SUB BYTE 
   0212 A6 03         [ 5]  542                     LDA      3,X                          ; * SHIFT THE NEXT THREE BYTES OF THE 
   0214 A7 04         [ 5]  543                     STA      4,X                          ; * MANTISSA RIGHT ONE COMPLETE BYTE. 
   0216 A6 02         [ 5]  544                     LDA      2,X                          ; * 
   0218 A7 03         [ 5]  545                     STA      3,X                          ; * 
   021A A6 01         [ 5]  546                     LDA      1,X                          ; * 
   021C A7 02         [ 5]  547                     STA      2,X                          ; * 
   021E B6 00 00      [ 5]  548                     LDA      _FPCARY                       ; GET THE CARRY IN BYTE 
   0221 A7 01         [ 5]  549                     STA      1,X                          ; STORE AS THE MS MANTISSA BYTE OF (X) 
                            550  .globl LBAAE
   0223 CB 08         [ 2]  551 LBAAE:               ADDB     #8                           ; ADD 8 TO DIFFERENCE OF EXPONENTS 
   0225 2F E6         [ 3]  552                     BLE      LBA9A                        ; BRANCH IF EXPONENT DIFFERENCE < -8 
   0227 B6 00 00      [ 5]  553                     LDA      _FPSBYT                       ; GET FPA SUB BYTE 
   022A C0 08         [ 2]  554                     SUBB     #8                           ; CAST OUT THE 8 ADDED IN ABOVE 
   022C 27 0C         [ 3]  555                     BEQ      LBAC4                        ; BRANCH IF EXPONENT DIFFERENCE = 0 
                            556  .globl LBAB8
   022E 67 01         [ 7]  557 LBAB8:               ASR      1,X                          ; * SHIFT MANTISSA AND SUB BYTE ONE BIT TO THE RIGHT 
                            558  .globl LBABA
   0230 66 02         [ 7]  559 LBABA:               ROR      2,X                          ; * 
   0232 66 03         [ 7]  560                     ROR      3,X                          ; * 
   0234 66 04         [ 7]  561                     ROR      4,X                          ; * 
   0236 46            [ 2]  562                     RORA                                  ; * 
   0237 5C            [ 2]  563                     INCB                                  ; ADD ONE TO EXPONENT DIFFERENCE 
   0238 26 F4         [ 3]  564                     BNE      LBAB8                        ; BRANCH IF EXPONENTS NOT = 
                            565  .globl LBAC4
   023A 39            [ 5]  566 LBAC4:               RTS      
                            567 
                            568  .globl LBAC5
   023B 81 00 00 00 00      569 LBAC5:               .byte      0x81,0x00,0x00,0x00,0x00          ; FLOATING POINT CONSTANT 1.0 
                            570 ; ARITHMETIC OPERATION (*) JUMPS HERE - MULTIPLY
                            571 ; _FPA0 BY (X) - RETURN PRODUCT IN _FPA0
                            572  .globl mulF0F1
   0240                     573 mulF0F1: 
   0240 F6 00 00      [ 5]  574                     LDB      _FP0EXP                       ; GET EXPONENT OF _FPA0 
   0243 20 03         [ 3]  575                     bra      LBACC 
                            576 
                            577  .globl mulF0x
   0245                     578 mulF0x: 
                            579  .globl LBACA
   0245 BD 02 D1      [ 8]  580 LBACA:               JSR      LBB2F                        ; MOVE PACKED FPA FROM (X) TO _FPA1 
                            581  .globl LBACC
   0248 10 27 00 84   [ 6]  582 LBACC:               LBEQ     LBB2E                        ; BRANCH IF EXPONENT OF _FPA0 = 0 
   024C BD 02 F2      [ 8]  583                     JSR      LBB48                        ; CALCULATE EXPONENT OF PRODUCT 
                            584 ; MULTIPLY _FPA0 MANTISSA BY _FPA1. NORMALIZE
                            585 ; HIGH ORDER BYTES OF PRODUCT IN _FPA0. THE
                            586 ; LOW ORDER FOUR BYTES OF THE PRODUCT WILL
                            587 ; BE STORED IN _VAB-_VAE.
                            588  .globl LBAD0
   024F 86 00         [ 2]  589 LBAD0:               LDA      #0                           ; * ZERO OUT MANTISSA OF _FPA2 
   0251 B7 00 00      [ 5]  590                     STA      _FPA2                         ; * 
   0254 B7 00 01      [ 5]  591                     STA      _FPA2+1                       ; * 
   0257 B7 00 02      [ 5]  592                     STA      _FPA2+2                       ; * 
   025A B7 00 03      [ 5]  593                     STA      _FPA2+3                       ; * 
   025D F6 00 03      [ 5]  594                     LDB      _FPA0+3                       ; GET LS BYTE OF _FPA0 
   0260 8D 2D         [ 7]  595                     BSR      LBB00                        ; MULTIPLY BY _FPA1 
   0262 F6 00 00      [ 5]  596                     LDB      _FPSBYT                       ; * TEMPORARILY SAVE SUB BYTE 4 
   0265 F7 00 00      [ 5]  597                     STB      _VAE                          ; * 
   0268 F6 00 02      [ 5]  598                     LDB      _FPA0+2                       ; GET NUMBER 3 MANTISSA BYTE OF _FPA0 
   026B 8D 22         [ 7]  599                     BSR      LBB00                        ; MULTIPLY BY _FPA1 
   026D F6 00 00      [ 5]  600                     LDB      _FPSBYT                       ; * TEMPORARILY SAVE SUB BYTE 3 
   0270 F7 00 00      [ 5]  601                     STB      _VAD                          ; * 
   0273 F6 00 01      [ 5]  602                     LDB      _FPA0+1                       ; GET NUMBER 2 MANTISSA BYTE OF _FPA0 
   0276 8D 17         [ 7]  603                     BSR      LBB00                        ; MULTIPLY BY _FPA1 
   0278 F6 00 00      [ 5]  604                     LDB      _FPSBYT                       ; * TEMPORARILY SAVE SUB BYTE 2 
   027B F7 00 00      [ 5]  605                     STB      _VAC                          ; * 
   027E F6 00 00      [ 5]  606                     LDB      _FPA0                         ; GET MS BYTE OF _FPA0 MANTISSA 
   0281 8D 10         [ 7]  607                     BSR      LBB02                        ; MULTIPLY BY _FPA1 
   0283 F6 00 00      [ 5]  608                     LDB      _FPSBYT                       ; * TEMPORARILY SAVE SUB BYTE 1 
   0286 F7 00 00      [ 5]  609                     STB      _VAB                          ; * 
   0289 BD 03 43      [ 8]  610                     JSR      LBC0B                        ; COPY MANTISSA FROM _FPA2 TO _FPA0 
   028C 7E 01 6B      [ 4]  611                     JMP      LBA1C                        ; NORMALIZE _FPA0 
                            612 
                            613  .globl LBB00
   028F 10 27 FF 77   [ 6]  614 LBB00:               LBEQ     LBA97                        ; SHIFT _FPA2 ONE BYTE TO RIGHT 
                            615  .globl LBB02
   0293 43            [ 2]  616 LBB02:               COMA                                  ; SET CARRY FLAG 
                            617 ; MULTIPLY _FPA1 MANTISSA BY ACCB AND
                            618 ; ADD PRODUCT TO _FPA2 MANTISSA
                            619  .globl LBB03
   0294 B6 00 00      [ 5]  620 LBB03:               LDA      _FPA2                         ; GET _FPA2 MS BYTE 
   0297 56            [ 2]  621                     RORB                                  ; ROTATE CARRY FLAG INTO SHIFT COUNTER; 
                            622 ;         DATA BIT INTO CARRY
   0298 27 36         [ 3]  623                     BEQ      LBB2E                        ; BRANCH WHEN 8 SHIFTS DONE 
   029A 24 21         [ 3]  624                     BCC      LBB20                        ; DO NOT ADD _FPA1 IF DATA BIT = 0 
   029C B6 00 03      [ 5]  625                     LDA      _FPA2+3                       ; * ADD MANTISSA LS BYTE 
   029F BB 00 03      [ 5]  626                     ADDA     _FPA1+3                       ; * 
   02A2 B7 00 03      [ 5]  627                     STA      _FPA2+3                       ; * 
   02A5 B6 00 02      [ 5]  628                     LDA      _FPA2+2                       ; = ADD MANTISSA NUMBER 3 BYTE 
   02A8 B9 00 02      [ 5]  629                     ADCA     _FPA1+2                       ; = 
   02AB B7 00 02      [ 5]  630                     STA      _FPA2+2                       ; = 
   02AE B6 00 01      [ 5]  631                     LDA      _FPA2+1                       ; * ADD MANTISSA NUMBER 2 BYTE 
   02B1 B9 00 01      [ 5]  632                     ADCA     _FPA1+1                       ; * 
   02B4 B7 00 01      [ 5]  633                     STA      _FPA2+1                       ; * 
   02B7 B6 00 00      [ 5]  634                     LDA      _FPA2                         ; = ADD MANTISSA MS BYTE 
   02BA B9 00 00      [ 5]  635                     ADCA     _FPA1                         ; = 
                            636  .globl LBB20
   02BD 46            [ 2]  637 LBB20:               RORA                                  ; * ROTATE CARRY INTO MS BYTE 
   02BE B7 00 00      [ 5]  638                     STA      _FPA2                         ; * 
   02C1 76 00 01      [ 7]  639                     ROR      _FPA2+1                       ; = ROTATE _FPA2 ONE BIT TO THE RIGHT 
   02C4 76 00 02      [ 7]  640                     ROR      _FPA2+2                       ; = 
   02C7 76 00 03      [ 7]  641                     ROR      _FPA2+3                       ; = 
   02CA 76 00 00      [ 7]  642                     ROR      _FPSBYT                       ; = 
   02CD 4F            [ 2]  643                     CLRA                                  ; CLEAR CARRY FLAG 
   02CE 20 C4         [ 3]  644                     BRA      LBB03                        ; KEEP LOOPING 
                            645 
                            646  .globl LBB2E
   02D0 39            [ 5]  647 LBB2E:               RTS      
                            648 
                            649 ; UNPACK A FP NUMBER FROM (X) TO _FPA1
                            650  .globl packedToF1
   02D1                     651 packedToF1: 
                            652  .globl LBB2F
   02D1 EC 01         [ 6]  653 LBB2F:               LDD      1,X                          ; GET TWO MSB BYTES OF MANTISSA FROM 
                            654 ;         FPA  POINTED TO BY X
   02D3 B7 00 00      [ 5]  655                     STA      _FP1SGN                       ; SAVE PACKED MANTISSA SIGN BYTE 
   02D6 8A 80         [ 2]  656                     ORA      #0x80                         ; FORCE BIT 7 OF MSB MANTISSA = 1 
   02D8 FD 00 00      [ 6]  657                     STD      _FPA1                         ; SAVE 2 MSB BYTES IN _FPA1 
   02DB F6 00 00      [ 5]  658                     LDB      _FP1SGN                       ; * GET PACKED MANTISSA SIGN BYTE. EOR W/_FPA0 
   02DE F8 00 00      [ 5]  659                     EORB     _FP0SGN                       ; * SIGN - NEW SIGN POSITION IF BOTH OLD SIGNS ALIKE, 
   02E1 F7 00 00      [ 5]  660                     STB      _RESSGN                       ; * NEG IF BOTH OLD SIGNS DIFF. SAVE ADJUSTED 
                            661 ;                                                         ; * MANTISSA SIGN BYTE
   02E4 EC 03         [ 6]  662                     LDD      3,X                          ; = GET 2 LSB BYTES OF MANTISSA 
   02E6 FD 00 02      [ 6]  663                     STD      _FPA1+2                       ; = AND PUT IN _FPA1 
   02E9 A6 84         [ 4]  664                     LDA      ,X                           ; * GET EXPONENT FROM (X) AND 
   02EB B7 00 00      [ 5]  665                     STA      _FP1EXP                       ; * PUT IN EXPONENT OF _FPA1 
   02EE F6 00 00      [ 5]  666                     LDB      _FP0EXP                       ; GET EXPONENT OF _FPA0 
   02F1 39            [ 5]  667                     RTS      
                            668 
                            669 ; CALCULATE EXPONENT FOR PRODUCT OF _FPA0 & _FPA1
                            670 ; ENTER WITH EXPONENT OF _FPA1 IN ACCA
                            671  .globl LBB48
   02F2 4D            [ 2]  672 LBB48:               TSTA                                  ; TEST EXPONENT OF _FPA1 
   02F3 27 1B         [ 3]  673                     BEQ      LBB61                        ; PURGE RETURN ADDRESS & SET _FPA0 = 0 
   02F5 BB 00 00      [ 5]  674                     ADDA     _FP0EXP                       ; ADD _FPA1 EXPONENT TO _FPA0 EXPONENT 
   02F8 46            [ 2]  675                     RORA                                  ; ROTATE CARRY INTO BIT 7; BIT 0 INTO CARRY 
   02F9 49            [ 2]  676                     ROLA                                  ; SET OVERFLOW FLAG 
   02FA 28 14         [ 3]  677                     BVC      LBB61                        ; BRANCH IF EXPONENT TOO LARGE OR SMALL 
   02FC 8B 80         [ 2]  678                     ADDA     #0x80                         ; ADD 0x80 BIAS TO EXPONENT 
   02FE B7 00 00      [ 5]  679                     STA      _FP0EXP                       ; SAVE NEW EXPONENT 
   0301 27 0F         [ 3]  680                     BEQ      LBB63                        ; SET _FPA0 
   0303 B6 00 00      [ 5]  681                     LDA      _RESSGN                       ; GET MANTISSA SIGN 
   0306 B7 00 00      [ 5]  682                     STA      _FP0SGN                       ; SAVE AS MANTISSA SIGN OF _FPA0 
   0309 39            [ 5]  683                     RTS      
                            684 
                            685 ;                   *        IF _FPA0 = POSITIVE THEN 'OV' ERROR IF _FPA0
                            686 ; = IS NEGATIVE THEN _FPA0 = 0
                            687  .globl LBB5C
   030A B6 00 00      [ 5]  688 LBB5C:               LDA      _FP0SGN                       ; GET MANTISSA SIGN OF _FPA0 
   030D 43            [ 2]  689                     COMA                                  ; CHANGE SIGN OF _FPA0 MANTISSA 
   030E 20 02         [ 3]  690                     BRA      LBB63 
                            691 
                            692  .globl LBB61
   0310 32 62         [ 5]  693 LBB61:               LEAS     2,S                          ; PURGE RETURN ADDRESS FROM STACK 
                            694  .globl LBB63
   0312 10 2A FE 7C   [ 6]  695 LBB63:               LBPL     LBA39                        ; ZERO _FPA0 MANTISSA SIGN & EXPONENT 
                            696  .globl LBB67
   0316 7E 02 05      [ 4]  697 LBB67:               JMP      LBA92                        ; 'OV' OVERFLOW ERROR 
                            698 
                            699 ; FAST MULTIPLY BY 10 AND LEAVE RESULT IN _FPA0
                            700  .globl LBB6A
   0319 BD 03 AC      [ 8]  701 LBB6A:               JSR      LBC5F                        ; TRANSFER _FPA0 TO _FPA1 
   031C 27 0F         [ 3]  702                     BEQ      LBB7C                        ; BRANCH IF EXPONENT = 0 
   031E 8B 02         [ 2]  703                     ADDA     #2                           ; ADD 2 TO EXPONENT (TIMES 4) 
   0320 25 F4         [ 3]  704                     BCS      LBB67                        ; 'OV' ERROR IF EXPONENT > 0xFF 
   0322 7F 00 00      [ 7]  705                     CLR      _RESSGN                       ; CLEAR RESULT SIGN BYTE 
   0325 BD 01 08      [ 8]  706                     JSR      LB9CD                        ; ADD _FPA1 TO _FPA0 (TIMES 5) 
   0328 7C 00 00      [ 7]  707                     INC      _FP0EXP                       ; ADD ONE TO EXPONENT (TIMES 10) 
   032B 27 E9         [ 3]  708                     BEQ      LBB67                        ; 'OV' ERROR IF EXPONENT > 0xFF 
                            709  .globl LBB7C
   032D 39            [ 5]  710 LBB7C:               RTS      
                            711 
                            712  .globl LBB7D
   032E 84 20 00 00 00      713 LBB7D:               .byte      0x84,0x20,0x00,0x00,0x00          ; FLOATING POINT CONSTANT 10 
                            714 ; DIVIDE _FPA0 BY 10
                            715  .globl LBB82
   0333 BD 03 AC      [ 8]  716 LBB82:               JSR      LBC5F                        ; MOVE _FPA0 TO _FPA1 
   0336 8E 03 2E      [ 3]  717                     LDX      #LBB7D                       ; POINT TO FLOATING POINT CONSTANT 10 
   0339 5F            [ 2]  718                     CLRB                                  ; ZERO MANTISSA SIGN BYTE 
                            719  .globl LBB89
   033A F7 00 00      [ 5]  720 LBB89:               STB      _RESSGN                       ; STORE THE QUOTIENT MANTISSA SIGN BYTE 
   033D BD 03 50      [ 8]  721                     JSR      LBC14                        ; UNPACK AN FP NUMBER FROM (X) INTO _FPA0 
                            722 
                            723 ;;;; - 
                            724 ;;;; - ; checked, not used
                            725 ;;;; - ;          FCB  SKP2           ; SKIP TWO BYTES
                            726 ;;;; - ;* DIVIDE (X) BY _FPA0-LEAVE NORMALIZED QUOTIENT IN _FPA0
                            727 ;;;; - ;LBB8F     BSR  LBB2F          ; GET FP NUMBER FROM (X) TO _FPA1
                            728 ;;;; - ; ARITHMETIC OPERATION (/) JUMPS HERE. DIVIDE _FPA1 BY _FPA0 (ENTER WITH
                            729 ;;;; - ; EXPONENT OF _FPA1 IN ACCA AND FLAGS SET BY TSTA)
                            730 ;;;; - ; DIVIDE _FPA1 BY _FPA0
                            731 ;;;; -  .globl divF1byF0
                            732 ;;;; - divF1byF0: 
                            733 ;;;; -  .globl LBB91
                            734 ;;;; - LBB91:               LBEQ     LBC06                        ; '/0' DIVIDE BY ZERO ERROR 
                            735 ;;;; -                     NEG      _FP0EXP                       ; GET EXPONENT OF RECIPROCAL OF DIVISOR 
                            736 ;;;; -                     BSR      LBB48                        ; CALCULATE EXPONENT OF QUOTIENT 
                            737 ;;;; -                     INC      _FP0EXP                       ; INCREMENT EXPONENT 
                            738 ;;;; -                     BEQ      LBB67                        ; 'OV' OVERFLOW ERROR 
                            739 ;;;; -                     LDX      #_FPA2                        ; POINT X TO MANTISSA OF _FPA2 - HOLD 
                            740 ;;;; - ;                                                         ; TEMPORARY QUOTIENT IN _FPA2
                            741 ;;;; -                     LDB      #4                           ; 5 BYTE DIVIDE 
                            742 ;;;; -                     STB      _TMPLOC                       ; SAVE BYTE COUNTER 
                            743 ;;;; -                     LDB      #1                           ; SHIFT COUNTER-AND TEMPORARY QUOTIENT BYTE 
                            744 ;;;; - ; COMPARE _FPA0 MANTISSA TO _FPA1 MANTISSA -
                            745 ;;;; - ; SET CARRY FLAG IF _FPA1 >= _FPA0
                            746 ;;;; -  .globl LBBA4
                            747 ;;;; - LBBA4:               LDA      _FPA0                         ; * COMPARE THE TWO MS BYTES 
                            748 ;;;; -                     CMPA     _FPA1                         ; * OF _FPA0 AND _FPA1 AND 
                            749 ;;;; -                     BNE      LBBBD                        ; * BRANCH IF <> 
                            750 ;;;; -                     LDA      _FPA0+1                       ; = COMPARE THE NUMBER 2 
                            751 ;;;; -                     CMPA     _FPA1+1                       ; = BYTES AND 
                            752 ;;;; -                     BNE      LBBBD                        ; = BRANCH IF <> 
                            753 ;;;; -                     LDA      _FPA0+2                       ; * COMPARE THE NUMBER 3 
                            754 ;;;; -                     CMPA     _FPA1+2                       ; * BYTES AND 
                            755 ;;;; -                     BNE      LBBBD                        ; * BRANCH IF <> 
                            756 ;;;; -                     LDA      _FPA0+3                       ; = COMPARE THE LS BYTES 
                            757 ;;;; -                     CMPA     _FPA1+3                       ; = AND BRANCH 
                            758 ;;;; -                     BNE      LBBBD                        ; = IF <> 
                            759 ;;;; -                     COMA                                  ; SET CARRY FLAG IF _FPA0 = _FPA1 
                            760 ;;;; -  .globl LBBBD
                            761 ;;;; - LBBBD:               TFR      CC,A                         ; SAVE CARRY FLAG STATUS IN ACCA; CARRY 
                            762 ;;;; - ;         CLEAR IF _FPA0 > _FPA1
                            763 ;;;; -                     ROLB                                  ; ROTATE CARRY INTO TEMPORARY QUOTIENT BYTE 
                            764 ;;;; -                     BCC      LBBCC                        ; CARRY WILL BE SET AFTER 8 SHIFTS 
                            765 ;;;; -                     STB      ,X+                          ; SAVE TEMPORARY QUOTIENT 
                            766 ;;;; -                     DEC      _TMPLOC                       ; DECREMENT BYTE COUNTER 
                            767 ;;;; -                     BMI      LBBFC                        ; BRANCH IF DONE 
                            768 ;;;; -                     BEQ      LBBF8                        ; BRANCH IF LAST BYTE 
                            769 ;;;; -                     LDB      #1                           ; RESET SHIFT COUNTER AND TEMPORARY QUOTIENT BYTE 
                            770 ;;;; -   .globl LBBCC
                            771 ;;;; - LBBCC:               TFR      A,CC                         ; RESTORE CARRY FLAG AND 
                            772 ;;;; -                      BCS      LBBDE                        ; BRANCH IF _FPA0 =< _FPA1 
                            773 ;;;; -   .globl LBBD0
                            774 ;;;; - LBBD0:               ASL      _FPA1+3                       ; * SHIFT _FPA1 MANTISSA 1 BIT TO LEFT 
                            775 ;;;; -                      ROL      _FPA1+2                       ; * 
                            776 ;;;; -                      ROL      _FPA1+1                       ; * 
                            777 ;;;; -                      ROL      _FPA1                         ; * 
                            778 ;;;; -                      BCS      LBBBD                        ; BRANCH IF CARRY - ADD ONE TO PARTIAL QUOTIENT 
                            779 ;;;; -                      BMI      LBBA4                        ; IF MSB OF HIGH ORDER MANTISSA BYTE IS 
                            780 ;;;; - ;         SET, CHECK THE MAGNITUDES OF _FPA0, _FPA1
                            781 ;;;; -                      BRA      LBBBD                        ; CARRY IS CLEAR, CHECK ANOTHER BIT 
                            782 ;;;; - 
                            783 ;;;; - ; SUBTRACT _FPA0 FROM _FPA1 - LEAVE RESULT IN _FPA1
                            784 ;;;; -  .globl LBBDE
                            785 ;;;; - LBBDE:               LDA      _FPA1+3                       ; * SUBTRACT THE LS BYTES OF MANTISSA 
                            786 ;;;; -                     SUBA     _FPA0+3                       ; * 
                            787 ;;;; -                     STA      _FPA1+3                       ; * 
                            788 ;;;; -                     LDA      _FPA1+2                       ; = THEN THE NEXT BYTE 
                            789 ;;;; -                     SBCA     _FPA0+2                       ; = 
                            790 ;;;; -                     STA      _FPA1+2                       ; = 
                            791 ;;;; -                     LDA      _FPA1+1                       ; * AND THE NEXT 
                            792 ;;;; -                     SBCA     _FPA0+1                       ; * 
                            793 ;;;; -                     STA      _FPA1+1                       ; * 
                            794 ;;;; -                     LDA      _FPA1                         ; = AND FINALLY, THE MS BYTE OF MANTISSA 
                            795 ;;;; -                     SBCA     _FPA0                         ; = 
                            796 ;;;; -                     STA      _FPA1                         ; = 
                            797 ;;;; -                     BRA      LBBD0                        ; GO SHIFT _FPA1 
                            798 ;;;; - 
                            799 ;;;; -  .globl LBBF8
                            800 ;;;; - LBBF8:               LDB      #0x40                         ; USE ONLY TWO BITS OF THE LAST BYTE (FIFTH) 
                            801 ;;;; -                     BRA      LBBCC                        ; GO SHIFT THE LAST BYTE 
                            802 ;;;; - 
                            803 ;;;; -  .globl LBBFC
                            804 ;;;; - LBBFC:               RORB                                  ; * SHIFT CARRY (ALWAYS SET HERE) INTO 
                            805 ;;;; -                     RORB                                  ; * BIT 5 AND MOVE 
                            806 ;;;; -                     RORB                                  ; * BITS 1,0 TO BITS 7,6 
                            807 ;;;; -                     STB      _FPSBYT                       ; SAVE SUB BYTE 
                            808 ;;;; -                     BSR      LBC0B                        ; MOVE MANTISSA OF _FPA2 TO _FPA0 
                            809 ;;;; -                     JMP      LBA1C                        ; NORMALIZE _FPA0 
                            810 ;;;; - 
                            811 ;;;; -  .globl LBC06
                            812 ;;;; - LBC06:               LDB      #2*10                        ; /0' ERROR 
   0340 7E 00 00      [ 4]  813                     JMP      ERROR_HANDLER                ; PROCESS THE ERROR 
                            814 
                            815 ; COPY MANTISSA FROM _FPA2 TO _FPA0
                            816  .globl LBC0B
   0343 BE 00 00      [ 6]  817 LBC0B:               LDX      _FPA2                         ; * MOVE TOP 2 BYTES 
   0346 BF 00 00      [ 6]  818                     STX      _FPA0                         ; * 
   0349 BE 00 02      [ 6]  819                     LDX      _FPA2+2                       ; = MOVE BOTTOM 2 BYTES 
   034C BF 00 02      [ 6]  820                     STX      _FPA0+2                       ; = 
   034F 39            [ 5]  821                     RTS      
                            822 
                            823 ; COPY A PACKED FP NUMBER FROM (X) TO _FPA0
                            824  .globl packedToF0
   0350                     825 packedToF0: 
                            826  .globl LBC14
   0350 34 02         [ 6]  827 LBC14:               PSHS     A                            ; SAVE ACCA 
   0352 EC 01         [ 6]  828                     LDD      1,X                          ; GET TOP TWO MANTISSA BYTES 
   0354 B7 00 00      [ 5]  829                     STA      _FP0SGN                       ; SAVE MS BYTE OF MANTISSA AS MANTISSA SIGN 
   0357 8A 80         [ 2]  830                     ORA      #0x80                         ; UNPACK MS BYTE 
   0359 FD 00 00      [ 6]  831                     STD      _FPA0                         ; SAVE UNPACKED TOP 2 MANTISSA BYTES 
   035C 7F 00 00      [ 7]  832                     CLR      _FPSBYT                       ; CLEAR MANTISSA SUB BYTE 
   035F E6 84         [ 4]  833                     LDB      ,X                           ; GET EXPONENT TO ACCB 
   0361 AE 03         [ 6]  834                     LDX      3,X                          ; * MOVE LAST 2 
   0363 BF 00 02      [ 6]  835                     STX      _FPA0+2                       ; * MANTISSA BYTES 
   0366 F7 00 00      [ 5]  836                     STB      _FP0EXP                       ; SAVE EXPONENT 
   0369 35 82         [ 7]  837                     PULS     A,PC                         ; RESTORE ACCA AND RETURN 
                            838  .globl LBC2A
   036B 8E 00 00      [ 3]  839 LBC2A:               LDX      #_V45                         ; POINT X TO MANTISSA OF FPA4 
   036E 20 03         [ 3]  840                     BRA      LBC35                        ; MOVE _FPA0 TO FPA4 
                            841 
                            842  .globl LBC2F
   0370 8E 00 00      [ 3]  843 LBC2F:               LDX      #_V40                         ; POINT X TO MANTISSA OF FPA3 
                            844 ; checked, not used AND produces wrong code!!!, sine _VABRDES is extended!
                            845 ;          FCB  SKP2           ; SKIP TWO BYTES
                            846 ;LBC33     LDX  _VABRDES         ; POINT X TO _VABRIABLE DESCRIPTOR IN _VABRDES
                            847 ; PACK _FPA0 AND MOVE IT TO ADDRESS IN X
                            848  .globl LBC35
   0373 B6 00 00      [ 5]  849 LBC35:               LDA      _FP0EXP                       ; * COPY EXPONENT 
   0376 A7 84         [ 4]  850                     STA      ,X                           ; * 
   0378 B6 00 00      [ 5]  851                     LDA      _FP0SGN                       ; GET MANTISSA SIGN BIT 
   037B 8A 7F         [ 2]  852                     ORA      #0x7F                         ; MASK THE BOTTOM 7 BITS 
   037D B4 00 00      [ 5]  853                     ANDA     _FPA0                         ; AND BIT 7 OF MANTISSA SIGN INTO BIT 7 OF MS BYTE 
   0380 A7 01         [ 5]  854                     STA      1,X                          ; SAVE MS BYTE 
   0382 B6 00 01      [ 5]  855                     LDA      _FPA0+1                       ; * MOVE 2ND MANTISSA BYTE 
   0385 A7 02         [ 5]  856                     STA      2,X                          ; * 
   0387 FE 00 02      [ 6]  857                     LDU      _FPA0+2                       ; = MOVE BOTTOM 2 MANTISSA BYTES 
   038A EF 03         [ 6]  858                     STU      3,X                          ; = 
   038C 39            [ 5]  859                     RTS      
                            860 
                            861 ; MOVE _FPA1 TO _FPA0 RETURN W/MANTISSA SIGN IN ACCA
                            862  .globl F1toF0
   038D                     863 F1toF0: 
                            864  .globl LBC4A
   038D B6 00 00      [ 5]  865 LBC4A:               LDA      _FP1SGN                       ; * COPY MANTISSA SIGN FROM 
                            866  .globl LBC4C
   0390 B7 00 00      [ 5]  867 LBC4C:               STA      _FP0SGN                       ; * _FPA1 TO _FPA0 
   0393 BE 00 00      [ 6]  868                     LDX      _FP1EXP                       ; = COPY EXPONENT + MS BYTE FROM 
   0396 BF 00 00      [ 6]  869                     STX      _FP0EXP                       ; = _FPA1 TO _FPA0 
   0399 7F 00 00      [ 7]  870                     CLR      _FPSBYT                       ; CLEAR MANTISSA SUB BYTE 
   039C B6 00 01      [ 5]  871                     LDA      _FPA1+1                       ; * COPY 2ND MANTISSA BYTE 
   039F B7 00 01      [ 5]  872                     STA      _FPA0+1                       ; * FROM _FPA1 TO _FPA0 
   03A2 B6 00 00      [ 5]  873                     LDA      _FP0SGN                       ; GET MANTISSA SIGN 
   03A5 BE 00 02      [ 6]  874                     LDX      _FPA1+2                       ; * COPY 3RD AND 4TH MANTISSA BYTE 
   03A8 BF 00 02      [ 6]  875                     STX      _FPA0+2                       ; * FROM _FPA1 TO _FPA0 
   03AB 39            [ 5]  876                     RTS      
                            877 
                            878 ; TRANSFER _FPA0 TO _FPA1
                            879  .globl F0toF1
   03AC                     880 F0toF1: 
                            881  .globl LBC5F
   03AC FC 00 00      [ 6]  882 LBC5F:               LDD      _FP0EXP                       ; * TRANSFER EXPONENT & MS BYTE 
   03AF FD 00 00      [ 6]  883                     STD      _FP1EXP                       ; * 
   03B2 BE 00 01      [ 6]  884                     LDX      _FPA0+1                       ; = TRANSFER MIDDLE TWO BYTES 
   03B5 BF 00 01      [ 6]  885                     STX      _FPA1+1                       ; = 
   03B8 BE 00 03      [ 6]  886                     LDX      _FPA0+3                       ; * TRANSFER BOTTOM TWO BYTES 
   03BB BF 00 03      [ 6]  887                     STX      _FPA1+3                       ; * 
   03BE 4D            [ 2]  888                     TSTA                                  ; SET FLAGS ACCORDING TO EXPONENT 
   03BF 39            [ 5]  889                     RTS      
                            890 
                            891 ; CHECK _FPA0                                              ; RETURN ACCB = 0 IF _FPA0 = 0,
                            892 ; ACCB = 0xFF IF _FPA0 = NEGATIVE, ACCB = 1 IF _FPA0 = POSITIVE
                            893  .globl LBC6D
   03C0 F6 00 00      [ 5]  894 LBC6D:               LDB      _FP0EXP                       ; GET EXPONENT 
   03C3 27 09         [ 3]  895                     BEQ      LBC79                        ; BRANCH IF _FPA0 = 0 
                            896  .globl LBC71
   03C5 F6 00 00      [ 5]  897 LBC71:               LDB      _FP0SGN                       ; GET SIGN OF MANTISSA 
                            898  .globl LBC73
   03C8 59            [ 2]  899 LBC73:               ROLB                                  ; BIT 7 TO CARRY 
   03C9 C6 FF         [ 2]  900                     LDB      #0xFF                         ; NEGATIVE FLAG 
   03CB 25 01         [ 3]  901                     BCS      LBC79                        ; BRANCH IF NEGATIVE MANTISSA 
   03CD 50            [ 2]  902                     NEGB                                  ; ACCB = 1 IF POSITIVE MANTISSA 
                            903  .globl LBC79
   03CE 39            [ 5]  904 LBC79:               RTS      
                            905 
                            906 ; SGN
                            907  .globl SGN
   03CF 8D EF         [ 7]  908 SGN:                 BSR      LBC6D                        ; SET ACCB ACCORDING TO SIGN OF _FPA0 
                            909 ; CONVERT A SIGNED NUMBER IN ACCB INTO A FLOATING POINT NUMBER
                            910  .globl LBC7C
   03D1 F7 00 00      [ 5]  911 LBC7C:               STB      _FPA0                         ; SAVE ACCB IN _FPA0 
   03D4 7F 00 01      [ 7]  912                     CLR      _FPA0+1                       ; CLEAR NUMBER 2 MANTISSA BYTE OF _FPA0 
   03D7 C6 88         [ 2]  913                     LDB      #0x88                         ; EXPONENT REQUIRED IF _FPA0 IS TO BE AN INTEGER 
                            914  .globl LBC82
   03D9 B6 00 00      [ 5]  915 LBC82:               LDA      _FPA0                         ; GET MS BYTE OF MANTISSA 
   03DC 80 80         [ 2]  916                     SUBA     #0x80                         ; SET CARRY IF POSITIVE MANTISSA 
                            917  .globl LBC86
   03DE F7 00 00      [ 5]  918 LBC86:               STB      _FP0EXP                       ; SAVE EXPONENT 
   03E1 CC 00 00      [ 3]  919                     LDD      #0                           ; * ZERO OUT ACCD AND 
   03E4 FD 00 02      [ 6]  920                     STD      _FPA0+2                       ; * BOTTOM HALF OF _FPA0 
   03E7 B7 00 00      [ 5]  921                     STA      _FPSBYT                       ; CLEAR SUB BYTE 
   03EA B7 00 00      [ 5]  922                     STA      _FP0SGN                       ; CLEAR SIGN OF _FPA0 MANTISSA 
   03ED 7E 01 67      [ 4]  923                     JMP      LBA18                        ; GO NORMALIZE _FPA0 
                            924 
                            925 ; ABS
                            926  .globl ABS
   03F0 7F 00 00      [ 7]  927 ABS:                 CLR      _FP0SGN                       ; FORCE MANTISSA SIGN OF _FPA0 POSITIVE 
   03F3 39            [ 5]  928                     RTS      
                            929 
                            930 ; COMPARE A PACKED FLOATING POINT NUMBER POINTED TO
                            931 ; BY (X) TO AN UNPACKED FP NUMBER IN _FPA0. RETURN
                            932 ; ZERO FLAG SET AND ACCB = 0, IF EQUAL                    ; ACCB = 1 IF
                            933 ; _FPA0 > (X)                                              ; ACCB = 0xFF IF _FPA0 < (X)
                            934  .globl LBC96
   03F4 E6 84         [ 4]  935 LBC96:               LDB      ,X                           ; CHECK EXPONENT OF (X) 
   03F6 27 C8         [ 3]  936                     BEQ      LBC6D                        ; BRANCH IF FPA = 0 
   03F8 E6 01         [ 5]  937                     LDB      1,X                          ; GET MS BYTE OF MANTISSA OF (X) 
   03FA F8 00 00      [ 5]  938                     EORB     _FP0SGN                       ; EOR WITH SIGN OF _FPA0 
   03FD 2B C6         [ 3]  939                     BMI      LBC71                        ; BRANCH IF SIGNS NOT = 
                            940 ; COMPARE _FPA0 WITH FP NUMBER POINTED TO BY (X).
                            941 ; _FPA0 IS NORMALIZED, (X) IS PACKED.
                            942  .globl LBCA0
   03FF F6 00 00      [ 5]  943 LBCA0:               LDB      _FP0EXP                       ; * GET EXPONENT OF 
   0402 E1 84         [ 4]  944                     CMPB     ,X                           ; * _FPA0, COMPARE TO EXPONENT OF 
   0404 26 21         [ 3]  945                     BNE      LBCC3                        ; * (X) AND BRANCH IF <>. 
   0406 E6 01         [ 5]  946                     LDB      1,X                          ; * GET MS BYTE OF (X), KEEP ONLY 
   0408 CA 7F         [ 2]  947                     ORB      #0x7F                         ; * THE SIGN BIT - 'AND' THE BOTTOM 7 
   040A F4 00 00      [ 5]  948                     ANDB     _FPA0                         ; * BITS OF _FPA0 INTO ACCB 
   040D E1 01         [ 5]  949                     CMPB     1,X                          ; = COMPARE THE BOTTOM 7 BITS OF THE MANTISSA 
   040F 26 16         [ 3]  950                     BNE      LBCC3                        ; = MS BYTE AND BRANCH IF <> 
   0411 F6 00 01      [ 5]  951                     LDB      _FPA0+1                       ; * COMPARE 2ND BYTE 
   0414 E1 02         [ 5]  952                     CMPB     2,X                          ; * OF MANTISSA, 
   0416 26 0F         [ 3]  953                     BNE      LBCC3                        ; * BRANCH IF <> 
   0418 F6 00 02      [ 5]  954                     LDB      _FPA0+2                       ; = COMPARE 3RD BYTE 
   041B E1 03         [ 5]  955                     CMPB     3,X                          ; = OF MANTISSA, 
   041D 26 08         [ 3]  956                     BNE      LBCC3                        ; = BRANCH IF <> 
   041F F6 00 03      [ 5]  957                     LDB      _FPA0+3                       ; * SUBTRACT LS BYTE 
   0422 E0 04         [ 5]  958                     SUBB     4,X                          ; * OF (X) FROM LS BYTE OF 
   0424 26 01         [ 3]  959                     BNE      LBCC3                        ; * _FPA0, BRANCH IF <> 
   0426 39            [ 5]  960                     RTS                                   ; RETURN IF FP (X) = _FPA0 
                            961 
                            962  .globl LBCC3
   0427 56            [ 2]  963 LBCC3:               RORB                                  ; SHIFT CARRY TO BIT 7; CARRY SET IF _FPA0 < (X) 
   0428 F8 00 00      [ 5]  964                     EORB     _FP0SGN                       ; TOGGLE SIZE COMPARISON BIT IF _FPA0 IS NEGATIVE 
   042B 20 9B         [ 3]  965                     BRA      LBC73                        ; GO SET ACCB ACCORDING TO COMPARISON 
                            966 
                            967 ; DE-NORMALIZE _FPA0 : SHIFT THE MANTISSA UNTIL THE BINARY POINT IS TO THE RIGHT
                            968 ; OF THE LEAST SIGNIFICANT BYTE OF THE MANTISSA
                            969  .globl LBCC8
   042D F6 00 00      [ 5]  970 LBCC8:               LDB      _FP0EXP                       ; GET EXPONENT OF _FPA0 
   0430 27 4A         [ 3]  971                     BEQ      LBD09                        ; ZERO MANTISSA IF _FPA0 = 0 
   0432 C0 A0         [ 2]  972                     SUBB     #0xA0                         ; SUBTRACT 0xA0 FROM _FPA0 EXPONENT T THIS WILL YIELD 
                            973 ;                                                         ; THE NUMBER OF SHIFTS REQUIRED TO DENORMALIZE _FPA0. WHEN
                            974 ;                                                         ; THE EXPONENT OF _FPA0 IS = ZERO, THEN THE BINARY POINT
                            975 ;                                                         ; WILL BE TO THE RIGHT OF THE MANTISSA
   0434 B6 00 00      [ 5]  976                     LDA      _FP0SGN                       ; TEST SIGN OF _FPA0 MANTISSA 
   0437 2A 06         [ 3]  977                     BPL      LBCD7                        ; BRANCH IF POSITIVE 
   0439 73 00 00      [ 7]  978                     COM      _FPCARY                       ; COMPLEMENT CARRY IN BYTE 
   043C BD 01 E6      [ 8]  979                     JSR      LBA7B                        ; NEGATE MANTISSA OF _FPA0 
                            980  .globl LBCD7
   043F 8E 00 00      [ 3]  981 LBCD7:               LDX      #_FP0EXP                      ; POINT X TO _FPA0 
   0442 C1 F8         [ 2]  982                     CMPB     #-8                          ; EXPONENT DIFFERENCE < -8? 
   0444 2E 07         [ 3]  983                     BGT      LBCE4                        ; YES 
   0446 BD 02 23      [ 8]  984                     JSR      LBAAE                        ; SHIFT _FPA0 RIGHT UNTIL _FPA0 EXPONENT = 0xA0 
   0449 7F 00 00      [ 7]  985                     CLR      _FPCARY                       ; CLEAR CARRY IN BYTE 
   044C 39            [ 5]  986                     RTS      
                            987 
                            988  .globl LBCE4
   044D 7F 00 00      [ 7]  989 LBCE4:               CLR      _FPCARY                       ; CLEAR CARRY IN BYTE 
   0450 B6 00 00      [ 5]  990                     LDA      _FP0SGN                       ; * GET SIGN OF _FPA0 MANTISSA 
   0453 49            [ 2]  991                     ROLA                                  ; * ROTATE IT INTO THE CARRY FLAG 
   0454 76 00 00      [ 7]  992                     ROR      _FPA0                         ; ROTATE CARRY (MANTISSA SIGN) INTO BIT 7 
                            993 ;                                                         ; OF LS BYTE OF MANTISSA
   0457 7E 02 30      [ 4]  994                     JMP      LBABA                        ; DE-NORMALIZE _FPA0 
                            995 
                            996 ; INT
                            997 ;                   *        THE INT STATEMENT WILL "DENORMALIZE" _FPA0 - THAT IS IT WILL SHIFT THE BINARY POINT
                            998 ; TO THE EXTREME RIGHT OF THE MANTISSA TO FORCE ITS EXPONENT TO BE 0xAO. ONCE
                            999 ; THIS IS DONE THE MANTISSA OF _FPA0 WILL CONTAIN THE FOUR LEAST SIGNIFICANT
                           1000 ; BYTES OF THE INTEGER PORTION OF _FPA0. AT THE CONCLUSION OF THE DE-NORMALIZATION
                           1001 ; ONLY THE INTEGER PORTION OF _FPA0 WILL REMAIN.
                           1002 ;
                           1003  .globl _toInt2
   045A                    1004 _toInt2:
                           1005 ; jsr packedToF0
                           1006  
   045A F6 00 00      [ 5] 1007 INT:                 LDB      _FP0EXP                       ; GET EXPONENT OF _FPA0 
   045D C1 A0         [ 2] 1008                     CMPB     #0xA0                         ; LARGEST POSSIBLE INTEGER EXPONENT 
   045F 24 27         [ 3] 1009                     BCC      LBD11                        ; RETURN IF _FPA0 >= 32768 
   0461 8D CA         [ 7] 1010                     BSR      LBCC8                        ; SHIFT THE BINARY POINT ONE TO THE RIGHT OF THE 
                           1011                                                          ; LS BYTE OF THE _FPA0 MANTISSA
   0463 F7 00 00      [ 5] 1012                     STB      _FPSBYT                       ; ACCB = 0: ZERO OUT THE SUB BYTE 
   0466 B6 00 00      [ 5] 1013                     LDA      _FP0SGN                       ; GET MANTISSA SIGN 
   0469 F7 00 00      [ 5] 1014                     STB      _FP0SGN                       ; FORCE MANTISSA SIGN TO BE POSITIVE 
   046C 80 80         [ 2] 1015                     SUBA     #0x80                         ; SET CARRY IF MANTISSA 
   046E 86 A0         [ 2] 1016                     LDA      #0xA0                         ; * GET DENORMALIZED EXPONENT AND 
   0470 B7 00 00      [ 5] 1017                     STA      _FP0EXP                       ; * SAVE IT IN _FPA0 EXPONENT 
   0473 B6 00 03      [ 5] 1018                     LDA      _FPA0+3                       ; = GET LS BYTE OF _FPA0 AND 
   0476 B7 00 00      [ 5] 1019                     STA      _CHARAC                       ; = SAVE IT IN CHARAC 
   0479 7E 01 67      [ 4] 1020                     JMP      LBA18                        ; NORMALIZE _FPA0 
                           1021  .globl LBD09
   047C F7 00 00      [ 5] 1022 LBD09:               STB      _FPA0                         ; * LOAD MANTISSA OF _FPA0 WITH CONTENTS OF ACCB 
   047F F7 00 01      [ 5] 1023                     STB      _FPA0+1                       ; * 
   0482 F7 00 02      [ 5] 1024                     STB      _FPA0+2                       ; * 
   0485 F7 00 03      [ 5] 1025                     STB      _FPA0+3                       ; * 
                           1026  .globl LBD11
   0488 39            [ 5] 1027 LBD11:               RTS                                   ; * 
                           1028 
                           1029 ; String pointer passed in y
                           1030 ; output _FPA0
                           1031 ; CONVERT ASCII STRING TO FLOATING POINT
                           1032  .globl atoF0
   0489                    1033 atoF0: 
                           1034  .globl LBD12
   0489                    1035 LBD12: 
   0489 BD 00 AA      [ 8] 1036                     JSR      GETNCH                       ; GET NEXT INPUT CHARACTER FROM BASIC 
   048C 8E 00 00      [ 3] 1037                     LDX      #0                           ; (X) = 0 
   048F BF 00 00      [ 6] 1038                     STX      _FP0SGN                       ; * ZERO OUT _FPA0 & THE SIGN FLAG (_COEFCT) 
   0492 BF 00 00      [ 6] 1039                     STX      _FP0EXP                       ; * 
   0495 BF 00 01      [ 6] 1040                     STX      _FPA0+1                       ; * 
   0498 BF 00 02      [ 6] 1041                     STX      _FPA0+2                       ; * 
   049B BF 00 00      [ 6] 1042                     STX      _V47                          ; INITIALIZE EXPONENT & EXPONENT SIGN FLAG TO ZERO 
   049E BF 00 00      [ 6] 1043                     STX      _V45                          ; INITIALIZE RIGHT DECIMAL CTR & DECIMAL PT FLAG TO 0 
   04A1 25 74         [ 3] 1044                     BCS      LBD86                        ; IF CARRY SET (NUMERIC CHARACTER), ASSUME ACCA CONTAINS FIRST 
                           1045 ;         NUMERIC CHAR, SIGN IS POSITIVE AND SKIP THE RAM HOOK
   04A3 BD 06 84      [ 8] 1046                     JSR      XVEC19                       ; CALL EXTENDED BASIC ADD-IN 
                           1047  .globl LBD25
   04A6                    1048 LBD25: 
   04A6 81 2D         [ 2] 1049                     CMPA     # '-                        ; * CHECK FOR A LEADING MINUS SIGN AND BRANCH
   04A8 26 05         [ 3] 1050                     BNE      LBD2D                        ; * IF NO MINUS SIGN 
   04AA 73 00 00      [ 7] 1051                     COM      _COEFCT                       ; TOGGLE SIGN; 0 = +; FF = - 
   04AD 20 04         [ 3] 1052                     BRA      LBD31                        ; INTERPRET THE REST OF THE STRING 
                           1053 
                           1054  .globl LBD2D
   04AF                    1055 LBD2D: 
   04AF 81 2B         [ 2] 1056                     CMPA     # '+                        ; * CHECK FOR LEADING PLUS SlGN AND BRANCH
   04B1 26 05         [ 3] 1057                     BNE      LBD35                        ; * IF NOT A PLUS SIGN 
                           1058  .globl LBD31
   04B3                    1059 LBD31: 
   04B3 BD 00 AA      [ 8] 1060                     JSR      GETNCH                       ; GET NEXT INPUT CHARACTER FROM BASIC 
   04B6 25 5F         [ 3] 1061                     BCS      LBD86                        ; BRANCH IF NUMERIC CHARACTER 
                           1062  .globl LBD35
   04B8                    1063 LBD35: 
   04B8 81 2E         [ 2] 1064                     CMPA     # '.                        ; DECIMAL POlNT?
   04BA 27 2D         [ 3] 1065                     BEQ      LBD61                        ; YES 
   04BC 81 45         [ 2] 1066                     CMPA     #'E ; "E" SHORTHAND FORM (SCIENTIFIC NOTATION)?
   04BE 26 2E         [ 3] 1067                     BNE      LBD65                        ; NO 
                           1068 ; E_VABLUATE EXPONENT OF EXPONENTIAL FORMAT
   04C0 BD 00 AA      [ 8] 1069                     JSR      GETNCH                       ; GET NEXT INPUT CHARACTER FROM BASIC 
   04C3 25 74         [ 3] 1070                     BCS      LBDA5                        ; BRANCH IF NUMERIC 
   04C5 81 2D         [ 2] 1071                     CMPA     # '-                        ; MINUS TOKEN?
   04C7 27 0E         [ 3] 1072                     BEQ      LBD53                        ; YES 
   04C9 81 2D         [ 2] 1073                     CMPA     # '-                        ; ASCII MINUS?
   04CB 27 0A         [ 3] 1074                     BEQ      LBD53                        ; YES 
   04CD 81 2B         [ 2] 1075                     CMPA     # '+                        ; PLUS TOKEN?
   04CF 27 09         [ 3] 1076                     BEQ      LBD55                        ; YES 
   04D1 81 2B         [ 2] 1077                     CMPA     # '+                        ; ASCII PLUS?
   04D3 27 05         [ 3] 1078                     BEQ      LBD55                        ; YES 
   04D5 20 08         [ 3] 1079                     BRA      LBD59                        ; BRANCH IF NO SIGN FOUND 
                           1080 
                           1081  .globl LBD53
   04D7 73 00 00      [ 7] 1082 LBD53:               COM      _V48                          ; SET EXPONENT SIGN FLAG TO NEGATIVE 
                           1083 ; STRIP A DECIMAL NUMBER FROM BASIC LINE, CONVERT IT TO BINARY IN _V47
                           1084  .globl LBD55
   04DA BD 00 AA      [ 8] 1085 LBD55:               JSR      GETNCH                       ; GET NEXT INPUT CHARACTER FROM BASIC 
   04DD 25 5A         [ 3] 1086                     BCS      LBDA5                        ; IF NUMERIC CHARACTER, CONVERT TO BINARY 
                           1087  .globl LBD59
   04DF 7D 00 00      [ 7] 1088 LBD59:               TST      _V48                          ; * CHECK EXPONENT SIGN FLAG 
   04E2 27 0A         [ 3] 1089                     BEQ      LBD65                        ; * AND BRANCH IF POSITIVE 
   04E4 70 00 00      [ 7] 1090                     NEG      _V47                          ; NEGATE _VABLUE OF EXPONENT 
   04E7 20 05         [ 3] 1091                     BRA      LBD65 
                           1092 
                           1093  .globl LBD61
   04E9 73 00 00      [ 7] 1094 LBD61:               COM      _V46                          ; *TOGGLE DECIMAL PT FLAG AND INTERPRET ANOTHER 
   04EC 26 C5         [ 3] 1095                     BNE      LBD31                        ; *CHARACTER IF <> 0 - TERMINATE INTERPRETATION 
                           1096 ;         IF   SECOND DECIMAL POINT
                           1097 ; ADJUST _FPA0 FOR THE DECIMAL EXPONENT IN _V47
                           1098  .globl LBD65
   04EE B6 00 00      [ 5] 1099 LBD65:               LDA      _V47                          ; * GET EXPONENT, SUBTRACT THE NUMBER OF 
   04F1 B0 00 00      [ 5] 1100                     SUBA     _V45                          ; * PLACES TO THE RIGHT OF DECIMAL POINT 
   04F4 B7 00 00      [ 5] 1101                     STA      _V47                          ; * AND RESAVE IT. 
   04F7 27 14         [ 3] 1102                     BEQ      LBD7F                        ; EXIT ROUTINE IF ADJUSTED EXPONENT = ZERO 
   04F9 2A 0A         [ 3] 1103                     BPL      LBD78                        ; BRANCH IF POSITIVE EXPONENT 
                           1104  .globl LBD6F
   04FB BD 03 33      [ 8] 1105 LBD6F:               JSR      LBB82                        ; DIVIDE _FPA0 BY 10 
   04FE 7C 00 00      [ 7] 1106                     INC      _V47                          ; INCREMENT EXPONENT COUNTER (MULTIPLY BY 10) 
   0501 26 F8         [ 3] 1107                     BNE      LBD6F                        ; KEEP MULTIPLYING 
   0503 20 08         [ 3] 1108                     BRA      LBD7F                        ; EXIT ROUTINE 
                           1109 
                           1110  .globl LBD78
   0505 BD 03 19      [ 8] 1111 LBD78:               JSR      LBB6A                        ; MULTIPLY _FPA0 BY 10 
   0508 7A 00 00      [ 7] 1112                     DEC      _V47                          ; DECREMENT EXPONENT COUNTER (DIVIDE BY 10) 
   050B 26 F8         [ 3] 1113                     BNE      LBD78                        ; KEEP MULTIPLYING 
                           1114  .globl LBD7F
   050D B6 00 00      [ 5] 1115 LBD7F:               LDA      _COEFCT                       ; GET THE SIGN FLAG 
   0510 10 2A FF 74   [ 6] 1116                     LBPL     LBD11                        ; RETURN IF POSITIVE 
   0514 7E 06 7B      [ 4] 1117                     JMP      LBEE9                        ; TOGGLE MANTISSA SIGN OF _FPA0, IF NEGATIVE 
                           1118 
                           1119 ;MULTIPLY _FPA0 BY TEN AND ADD ACCA TO THE RESULT
                           1120  .globl LBD86
   0517 F6 00 00      [ 5] 1121 LBD86:               LDB      _V45                          ; *GET THE RIGHT DECIMAL COUNTER AND SUBTRACT 
   051A F0 00 00      [ 5] 1122                     SUBB     _V46                          ; *THE DECIMAL POINT FLAG FROM IT. IF DECIMAL POINT 
   051D F7 00 00      [ 5] 1123                     STB      _V45                          ; *FLAG=0, NOTHING HAPPENS. IF DECIMAL POINT FLAG IS 
                           1124 ;                             -1, THEN RIGHT DECIMAL COUNTER IS INCREMENTED BY ONE
   0520 34 02         [ 6] 1125                     PSHS     A                            ; SAVE NEW DIGIT ON STACK 
   0522 BD 03 19      [ 8] 1126                     JSR      LBB6A                        ; MULTIPLY _FPA0 BY 10 
   0525 35 04         [ 6] 1127                     PULS     B                            ; GET NEW DIGIT BACK 
   0527 C0 30         [ 2] 1128                     SUBB     # '0                        ; MASK OFF ASCII
   0529 8D 02         [ 7] 1129                     BSR      LBD99                        ; ADD ACCB TO _FPA0 
   052B 20 86         [ 3] 1130                     BRA      LBD31                        ; GET ANOTHER CHARACTER FROM BASIC 
                           1131 
                           1132  .globl LBD99
   052D BD 03 70      [ 8] 1133 LBD99:               JSR      LBC2F                        ; PACK _FPA0 AND SAVE IT IN FPA3 
   0530 BD 03 D1      [ 8] 1134                     JSR      LBC7C                        ; CONVERT ACCB TO FP NUMBER IN _FPA0 
   0533 8E 00 00      [ 3] 1135                     LDX      #_V40                         ; * ADD _FPA0 TO 
   0536 7E 00 FD      [ 4] 1136                     JMP      LB9C2                        ; * FPA3 
                           1137 
                           1138  .globl LBDA5
   0539 F6 00 00      [ 5] 1139 LBDA5:               LDB      _V47 
   053C 58            [ 2] 1140                     ASLB                                  ; TIMES 2 
   053D 58            [ 2] 1141                     ASLB                                  ; TIMES 4 
   053E FB 00 00      [ 5] 1142                     ADDB     _V47                          ; ADD 1 = TIMES 5 
   0541 58            [ 2] 1143                     ASLB                                  ; TIMES 10 
   0542 80 30         [ 2] 1144                     SUBA     # '0                        ; *MASK OFF ASCII FROM ACCA, PUSH
   0544 34 04         [ 6] 1145                     PSHS     B                            ; *RESULT ONTO THE STACK AND 
   0546 AB E0         [ 6] 1146                     ADDA     ,S+                          ; ADD lT TO ACCB 
   0548 B7 00 00      [ 5] 1147                     STA      _V47                          ; SAVE IN _V47 
   054B 20 8D         [ 3] 1148                     BRA      LBD55                        ; INTERPRET ANOTHER CHARACTER 
                           1149 
                           1150 ;
                           1151  .globl LBDB6
   054D 9B 3E BC 1F FD     1152 LBDB6:               .byte      0x9B,0x3E,0xBC,0x1F,0xFD          ; * 99999999.9 
                           1153  .globl LBDBB
   0552 9E 6E 6B 27 FD     1154 LBDBB:               .byte      0x9E,0x6E,0x6B,0x27,0xFD          ; * 999999999 
                           1155  .globl LBDC0
   0557 9E 6E 6B 28 00     1156 LBDC0:               .byte      0x9E,0x6E,0x6B,0x28,0x00          ; * 1E + 09 
                           1157 ;
                           1158 ;LBDC5     LDX  #LABE8-1       ; POINT X TO " IN " MESSAGE
                           1159 ;          BSR  LBDD6          ; COPY A STRING FROM (X) TO CONSOLE OUT
                           1160 ;          LDD  CURLIN         ; GET CURRENT BASIC LINE NUMBER TO ACCD
                           1161 ;* CONVERT _VABLUE IN ACCD INTO A DECIMAL NUMBER
                           1162 ;* AND PRINT IT TO CONSOLE OUT
                           1163 ;LBDCC     STD  _FPA0           ; SAVE ACCD IN TOP HALF OF _FPA0
                           1164 ;          LDB  #0x90           ; REQ'D EXPONENT IF TOP HALF OF ACCD = INTEGER
                           1165 ;          COMA                ; SET CARRY FLAG - FORCE POSITIVE MANTISSA
                           1166 ;          JSR  LBC86          ; ZERO BOTTOM HALF AND SIGN OF _FPA0, THEN
                           1167 ;*         SAVE EXPONENT AND NORMALIZE IT
                           1168 ;          BSR  LBDD9          ; CONVERT FP NUMBER TO ASCII STRING
                           1169 ;LBDD6     JMP  LB99C          ; COPY A STRING FROM (X) TO CONSOLE OUT
                           1170  .globl F0toa
   055C                    1171 F0toa: 
                           1172 ; CONVERT FP NUMBER TO ASCII STRING
                           1173 ;LBDD9               LDU      #STRBUF+3                    ; POINT U TO BUFFER WHICH WILL NOT CAUSE 
                           1174 ;                                                         ; THE STRING TO BE STORED IN STRING SPACE
                           1175  .globl LBDDC
   055C 86 20         [ 2] 1176 LBDDC:               LDA      #SPACE                       ; SPACE = DEFAULT SIGN FOR POSITIVE # 
   055E F6 00 00      [ 5] 1177                     LDB      _FP0SGN                       ; GET SIGN OF _FPA0 
   0561 2A 02         [ 3] 1178                     BPL      LBDE4                        ; BRANCH IF POSITIVE 
   0563 86 2D         [ 2] 1179                     LDA      # '-                        ; ASCII MINUS SIGN
                           1180  .globl LBDE4
   0565 A7 C0         [ 6] 1181 LBDE4:               STA      ,U+                          ; STORE SIGN OF NUMBER 
   0567 FF 00 00      [ 6] 1182                     STU      _COEFPT                       ; SAVE BUFFER POINTER 
   056A B7 00 00      [ 5] 1183                     STA      _FP0SGN                       ; SAVE SIGN (IN ASCII) 
   056D 86 30         [ 2] 1184                     LDA      # '0                        ; ASCII ZERO IF EXPONENT = 0
   056F F6 00 00      [ 5] 1185                     LDB      _FP0EXP                       ; GET _FPA0 EXPONENT 
   0572 10 27 00 D7   [ 6] 1186                     LBEQ     LBEB8                        ; BRANCH IF _FPA0 = 0 
   0576 4F            [ 2] 1187                     CLRA                                  ; BASE 10 EXPONENT=0 FOR FP NUMBER > 1 
   0577 C1 80         [ 2] 1188                     CMPB     #0x80                         ; CHECK EXPONENT 
   0579 22 08         [ 3] 1189                     BHI      LBDFF                        ; BRANCH IF FP NUMBER > 1 
                           1190 ; IF _FPA0 < 1.0, MULTIPLY IT BY 1E+09 TO SPEED UP THE CONVERSION PROCESS
   057B 8E 05 57      [ 3] 1191                     LDX      #LBDC0                       ; POINT X TO FP 1E+09 
   057E BD 02 45      [ 8] 1192                     JSR      LBACA                        ; MULTIPLY _FPA0 BY (X) 
   0581 86 F7         [ 2] 1193                     LDA      #-9                          ; BASE 10 EXPONENT = -9 
                           1194  .globl LBDFF
   0583 B7 00 00      [ 5] 1195 LBDFF:               STA      _V45                          ; BASE 10 EXPONENT 
                           1196 ; PSEUDO - NORMALIZE THE FP NUMBER TO A _VABLUE IN THE RANGE
                           1197 ; OF 999,999,999 RO 99,999,999.9 - THIS IS THE LARGEST
                           1198 ; NUMBER RANGE IN WHICH ALL OF THE DIGITS ARE
                           1199 ; SIGNIFICANT WHICH CAN BE DISPLAYED WITHOUT USING
                           1200 ; SCIENTIFIC NOTATION
                           1201  .globl LBE01
   0586 8E 05 52      [ 3] 1202 LBE01:               LDX      #LBDBB                       ; POINT X TO FP 999,999,999 
   0589 BD 03 FF      [ 8] 1203                     JSR      LBCA0                        ; COMPARE _FPA0 TO 999,999,999 
   058C 2E 10         [ 3] 1204                     BGT      LBE18                        ; BRANCH IF > 999,999,999 
                           1205  .globl LBE09
   058E 8E 05 4D      [ 3] 1206 LBE09:               LDX      #LBDB6                       ; POINT X TO FP 99,999,999.9 
   0591 BD 03 FF      [ 8] 1207                     JSR      LBCA0                        ; COMPARE _FPA0 TO 99,999,999.9 
   0594 2E 10         [ 3] 1208                     BGT      LBE1F                        ; BRANCH IF > 99,999,999.9 (IN RANGE) 
   0596 BD 03 19      [ 8] 1209                     JSR      LBB6A                        ; MULTIPLY _FPA0 BY 10 
   0599 7A 00 00      [ 7] 1210                     DEC      _V45                          ; SUBTRACT ONE FROM DECIMAL OFFSET 
   059C 20 F0         [ 3] 1211                     BRA      LBE09                        ; PSEUDO - NORMALIZE SOME MORE 
                           1212 
                           1213  .globl LBE18
   059E BD 03 33      [ 8] 1214 LBE18:               JSR      LBB82                        ; DIVIDE _FPA0 BY 10 
   05A1 7C 00 00      [ 7] 1215                     INC      _V45                          ; ADD ONE TO BASE 10 EXPONENT 
   05A4 20 E0         [ 3] 1216                     BRA      LBE01                        ; PSEUDO - NORMALIZE SOME MORE 
                           1217 
                           1218  .globl LBE1F
   05A6 BD 00 DD      [ 8] 1219 LBE1F:               JSR      LB9B4                        ; ADD .5 TO _FPA0 (ROUND OFF) 
   05A9 BD 04 2D      [ 8] 1220                     JSR      LBCC8                        ; CONVERT _FPA0 TO AN INTEGER 
   05AC C6 01         [ 2] 1221                     LDB      #1                           ; DEFAULT DECIMAL POINT FLAG (FORCE IMMED DECIMAL PT) 
   05AE B6 00 00      [ 5] 1222                     LDA      _V45                          ; * GET BASE 10 EXPONENT AND ADD TEN TO IT 
   05B1 8B 0A         [ 2] 1223                     ADDA     #9+1                         ; * (NUMBER 'NORMALIZED' TO 9 PLACES & DECIMAL PT) 
   05B3 2B 09         [ 3] 1224                     BMI      LBE36                        ; BRANCH IF NUMBER < 1.0 
   05B5 81 0B         [ 2] 1225                     CMPA     #9+2                         ; NINE PLACES MAY BE DISPLAYED WITHOUT 
                           1226 ;         USING SCIENTIFIC NOTATION
   05B7 24 05         [ 3] 1227                     BCC      LBE36                        ; BRANCH IF SCIENTIFIC NOTATION REQUIRED 
   05B9 4A            [ 2] 1228                     DECA                                  ; * SUBTRACT 1 FROM MODIFIED BASE 10 EXPONENT CTR 
   05BA 1F 89         [ 6] 1229                     TFR      A,B                          ; * AND SAVE IT IN ACCB (DECiMAL POINT FLAG) 
   05BC 86 02         [ 2] 1230                     LDA      #2                           ; FORCE EXPONENT = 0 - DON'T USE SCIENTIFIC NOTATION 
                           1231  .globl LBE36
   05BE 4A            [ 2] 1232 LBE36:               DECA                                  ; * SUBTRACT TWO (WITHOUT AFFECTING CARRY) 
   05BF 4A            [ 2] 1233                     DECA                                  ; * FROM BASE 10 EXPONENT 
   05C0 B7 00 00      [ 5] 1234                     STA      _V47                          ; SAVE EXPONENT - ZERO EXPONENT = DO NOT DISPLAY 
                           1235 ;         IN   SCIENTIFIC NOTATION
   05C3 F7 00 00      [ 5] 1236                     STB      _V45                          ; DECIMAL POINT FLAG - NUMBER OF PLACES TO 
                           1237 ;         LEFT OF DECIMAL POINT
   05C6 2E 0E         [ 3] 1238                     BGT      LBE4B                        ; BRANCH IF >= 1 
   05C8 FE 00 00      [ 6] 1239                     LDU      _COEFPT                       ; POINT U TO THE STRING BUFFER 
   05CB 86 2E         [ 2] 1240                     LDA      # '.                        ; * STORE A PERIOD
   05CD A7 C0         [ 6] 1241                     STA      ,U+                          ; * IN THE BUFFER 
   05CF 5D            [ 2] 1242                     TSTB                                  ; CHECK DECIMAL POINT FLAG 
   05D0 27 04         [ 3] 1243                     BEQ      LBE4B                        ; BRANCH IF NOTHING TO LEFT OF DECIMAL POINT 
   05D2 86 30         [ 2] 1244                     LDA      # '0                        ; * STORE A ZERO
   05D4 A7 C0         [ 6] 1245                     STA      ,U+                          ; * IN THE BUFFER 
                           1246 ; CONVERT _FPA0 INTO A STRING OF ASCII DIGITS
                           1247  .globl LBE4B
   05D6 8E 06 57      [ 3] 1248 LBE4B:               LDX      #LBEC5                       ; POINT X TO FP POWER OF 10 MANTISSA 
   05D9 C6 80         [ 2] 1249                     LDB      #0+0x80                       ; INITIALIZE DIGIT COUNTER TO 0+0x80 
                           1250 ; BIT 7 SET IS USED TO INDICATE THAT THE POWER OF 10 MANTISSA
                           1251 ;                   *        IS NEGATIVE. WHEN YOU 'ADD' A NEGATIVE MANTISSA, IT IS
                           1252 ; THE SAME AS SUBTRACTING A POSITIVE ONE AND BIT 7 OF ACCB IS HOW
                           1253 ;                   *        THE ROUTINE KNOWS THAT A 'SUBTRACTION' IS OCCURING.
                           1254  .globl LBE50
   05DB B6 00 03      [ 5] 1255 LBE50:               LDA      _FPA0+3                       ; * ADD MANTISSA LS 
   05DE AB 03         [ 5] 1256                     ADDA     3,X                          ; * BYTE OF _FPA0 
   05E0 B7 00 03      [ 5] 1257                     STA      _FPA0+3                       ; * AND (X) 
   05E3 B6 00 02      [ 5] 1258                     LDA      _FPA0+2                       ; = ADD MANTISSA 
   05E6 A9 02         [ 5] 1259                     ADCA     2,X                          ; = NUMBER 3 BYTE OF 
   05E8 B7 00 02      [ 5] 1260                     STA      _FPA0+2                       ; = _FPA0 AND (X) 
   05EB B6 00 01      [ 5] 1261                     LDA      _FPA0+1                       ; * ADD MANTISSA 
   05EE A9 01         [ 5] 1262                     ADCA     1,X                          ; * NUMBER 2 BYTE OF 
   05F0 B7 00 01      [ 5] 1263                     STA      _FPA0+1                       ; * _FPA0 AND (X) 
   05F3 B6 00 00      [ 5] 1264                     LDA      _FPA0                         ; = ADD MANTISSA 
   05F6 A9 84         [ 4] 1265                     ADCA     ,X                           ; = MS BYTE OF 
   05F8 B7 00 00      [ 5] 1266                     STA      _FPA0                         ; = _FPA0 AND (X) 
   05FB 5C            [ 2] 1267                     INCB                                  ; ADD ONE TO DIGIT COUNTER 
   05FC 56            [ 2] 1268                     RORB                                  ; ROTATE CARRY INTO BIT 7 
   05FD 59            [ 2] 1269                     ROLB                                  ; *SET OVERFLOW FLAG AND BRANCH IF CARRY = 1 AND 
   05FE 28 DB         [ 3] 1270                     BVC      LBE50                        ; *POSITIVE MANTISSA OR CARRY = 0 AND NEG MANTISSA 
   0600 24 03         [ 3] 1271                     BCC      LBE72                        ; BRANCH IF NEGATIVE MANTISSA 
   0602 C0 0B         [ 2] 1272                     SUBB     #10+1                        ; * TAKE THE 9'S COMPLEMENT IF 
   0604 50            [ 2] 1273                     NEGB                                  ; * ADDING MANTISSA 
                           1274  .globl LBE72
   0605                    1275 LBE72: 
   0605 CB 2F         [ 2] 1276                     ADDB     # '0-1                      ; ADD ASCII OFFSET TO DIGIT
   0607 30 04         [ 5] 1277                     LEAX     4,X                          ; MOVE TO NEXT POWER OF 10 MANTISSA 
   0609 1F 98         [ 6] 1278                     TFR      B,A                          ; SAVE DIGIT IN ACCA 
   060B 84 7F         [ 2] 1279                     ANDA     #0x7F                         ; MASK OFF BIT 7 (ADD/SUBTRACT FLAG) 
   060D A7 C0         [ 6] 1280                     STA      ,U+                          ; STORE DIGIT IN STRING BUFFER 
   060F 7A 00 00      [ 7] 1281                     DEC      _V45                          ; DECREMENT DECIMAL POINT FLAG 
   0612 26 04         [ 3] 1282                     BNE      LBE84                        ; BRANCH IF NOT TIME FOR DECIMAL POINT 
   0614 86 2E         [ 2] 1283                     LDA      # '.                        ; * STORE DECIMAL POINT IN
   0616 A7 C0         [ 6] 1284                     STA      ,U+                          ; * STRING BUFFER 
                           1285  .globl LBE84
   0618 53            [ 2] 1286 LBE84:               COMB                                  ; TOGGLE BIT 7 (ADD/SUBTRACT FLAG) 
   0619 C4 80         [ 2] 1287                     ANDB     #0x80                         ; MASK OFF ALL BUT ADD/SUBTRACT FLAG 
   061B 8C 06 7B      [ 4] 1288                     CMPX     #LBEC5+36                    ; COMPARE X TO END OF MANTISSA TABLE 
   061E 26 BB         [ 3] 1289                     BNE      LBE50                        ; BRANCH IF NOT AT END OF TABLE 
                           1290 ; BLANK TRAILING ZEROS AND STORE EXPONENT IF ANY
                           1291  .globl LBE8C
   0620 A6 C2         [ 6] 1292 LBE8C:               LDA      ,-U                          ; GET THE LAST CHARACTER; MOVE POINTER BACK 
   0622 81 30         [ 2] 1293                     CMPA     # '0                        ; WAS IT A ZERO?
   0624 27 FA         [ 3] 1294                     BEQ      LBE8C                        ; IGNORE TRAILING ZEROS IF SO 
   0626 81 2E         [ 2] 1295                     CMPA     # '.                        ; CHECK FOR DECIMAL POINT
   0628 26 02         [ 3] 1296                     BNE      LBE98                        ; BRANCH IF NOT DECIMAL POINT 
   062A 33 5F         [ 5] 1297                     LEAU     -1,U                         ; STEP OVER THE DECIMAL POINT 
                           1298  .globl LBE98
   062C                    1299 LBE98: 
   062C 86 2B         [ 2] 1300                     LDA      # '+                        ; ASCII PLUS SIGN
   062E F6 00 00      [ 5] 1301                     LDB      _V47                          ; GET SCIENTIFIC NOTATION EXPONENT 
   0631 27 1C         [ 3] 1302                     BEQ      LBEBA                        ; BRANCH IF NOT SCIENTIFIC NOTATION 
   0633 2A 03         [ 3] 1303                     BPL      LBEA3                        ; BRANCH IF POSITIVE EXPONENT 
   0635 86 2D         [ 2] 1304                     LDA      # '-                        ; ASCII MINUS SIGN
   0637 50            [ 2] 1305                     NEGB                                  ; NEGATE EXPONENT IF NEGATIVE 
                           1306  .globl LBEA3
   0638 A7 42         [ 5] 1307 LBEA3:               STA      2,U                          ; STORE EXPONENT SIGN IN STRING 
   063A 86 45         [ 2] 1308                     LDA      # 'E            ; * GET ASCII 'E (SCIENTIFIC NOTATION
   063C A7 41         [ 5] 1309                     STA      1,U                          ; * FLAG) AND SAVE IT IN THE STRING 
   063E 86 2F         [ 2] 1310                     LDA      # '0-1                      ; INITIALIZE ACCA TO ASCII ZERO
                           1311  .globl LBEAB
   0640 4C            [ 2] 1312 LBEAB:               INCA                                  ; ADD ONE TO 10'S DIGIT OF EXPONENT 
   0641 C0 0A         [ 2] 1313                     SUBB     #10                          ; SUBTRACT 10 FROM ACCB 
   0643 24 FB         [ 3] 1314                     BCC      LBEAB                        ; ADD 1 TO 10'S DIGIT IF NO CARRY 
   0645 CB 3A         [ 2] 1315                     ADDB     # '9+1                      ; CONVERT UNITS DIGIT TO ASCII
   0647 ED 43         [ 6] 1316                     STD      3,U                          ; SAVE EXPONENT IN STRING 
   0649 6F 45         [ 7] 1317                     CLR      5,U                          ; CLEAR LAST BYTE (TERMINATOR) 
   064B 20 04         [ 3] 1318                     BRA      LBEBC                        ; GO RESET POINTER 
                           1319 
                           1320  .globl LBEB8
   064D A7 C4         [ 4] 1321 LBEB8:               STA      ,U                           ; STORE LAST CHARACTER 
                           1322  .globl LBEBA
   064F 6F 41         [ 7] 1323 LBEBA:               CLR      1,U                          ; CLEAR LAST BYTE (TERMINATOR - REQUIRED BY 
                           1324 ;         PRINT SUBROUTINES)
                           1325  .globl LBEBC
   0651                    1326 LBEBC:                                                     ;LDX     #STRBUF+3 ; RESET POINTER TO START OF BUFFER 
   0651 39            [ 5] 1327                     RTS      
                           1328 
                           1329 ;
                           1330  .globl LBEC0
   0652 80 00 00 00 00     1331 LBEC0:               .byte      0x80,0x00,0x00,0x00,0x00          ; FLOATING POINT .5 
                           1332 ;
                           1333 ;** TABLE OF UNNORMALIZED POWERS OF 10
                           1334  .globl LBEC5
   0657 FA 0A 1F 00        1335 LBEC5:               .byte      0xFA,0x0A,0x1F,0x00              ; -100000000 
                           1336  .globl LBEC9
   065B 00 98 96 80        1337 LBEC9:               .byte      0x00,0x98,0x96,0x80              ; 10000000 
                           1338  .globl LBECD
   065F FF F0 BD C0        1339 LBECD:               .byte      0xFF,0xF0,0xBD,0xC0              ; -1000000 
                           1340  .globl LBED1
   0663 00 01 86 A0        1341 LBED1:               .byte      0x00,0x01,0x86,0xA0              ; 100000 
                           1342  .globl LBED5
   0667 FF FF D8 F0        1343 LBED5:               .byte      0xFF,0xFF,0xD8,0xF0              ; -10000 
                           1344  .globl LBED9
   066B 00 00 03 E8        1345 LBED9:               .byte      0x00,0x00,0x03,0xE8              ; 1000 
                           1346  .globl LBEDD
   066F FF FF FF 9C        1347 LBEDD:               .byte      0xFF,0xFF,0xFF,0x9C              ; -100 
                           1348  .globl LBEE1
   0673 00 00 00 0A        1349 LBEE1:               .byte      0x00,0x00,0x00,0x0A              ; 10 
                           1350  .globl LBEE5
   0677 FF FF FF FF        1351 LBEE5:               .byte      0xFF,0xFF,0xFF,0xFF              ; -1 
                           1352 ;
                           1353 ;
                           1354  .globl LBEE9
   067B B6 00 00      [ 5] 1355 LBEE9:               LDA      _FP0EXP                       ; GET EXPONENT OF _FPA0 
   067E 27 03         [ 3] 1356                     BEQ      LBEEF                        ; BRANCH IF _FPA0 = 0 
   0680 73 00 00      [ 7] 1357                     COM      _FP0SGN                       ; TOGGLE MANTISSA SIGN OF _FPA0 
                           1358  .globl LBEEF
   0683 39            [ 5] 1359 LBEEF:               RTS      
                           1360 
                           1361 ;
                           1362 ;
                           1363 ; EXTENDED BASIC RVEC19 HOOK CODE
                           1364  .globl XVEC19
   0684                    1365 XVEC19: 
   0684 81 26         [ 2] 1366                     CMPA     # '&                        ; *
   0686 26 65         [ 3] 1367                     BNE      L8845                        ; * RETURN IF NOT HEX OR OCTAL _VABRIABLE 
   0688 32 62         [ 5] 1368                     LEAS     0x02,S                        ; PURGE RETURN ADDRESS FROM STACK 
                           1369 ;                   *        PROCESS A _VABRIABLE PRECEEDED BY A '&' (&H,&O)
                           1370  .globl L87EB
   068A 7F 00 02      [ 7] 1371 L87EB:               CLR      _FPA0+2                       ; * CLEAR BOTTOM TWO 
   068D 7F 00 03      [ 7] 1372                     CLR      _FPA0+3                       ; * BYTES OF _FPA0 
   0690 8E 00 02      [ 3] 1373                     LDX      #_FPA0+2                      ; BYTES 2,3 OF _FPA0 = (TEMPORARY ACCUMULATOR) 
   0693 BD 00 AA      [ 8] 1374                     JSR      GETNCH                       ; GET A CHARACTER FROM BASIC 
   0696 81 4F         [ 2] 1375                     CMPA     # 'O
   0698 27 13         [ 3] 1376                     BEQ      L880A                        ; YES 
   069A 81 48         [ 2] 1377                     CMPA     # 'H
   069C 27 28         [ 3] 1378                     BEQ      L881F                        ; YES 
   069E BD 00 AA      [ 8] 1379                     JSR      GETCCH                       ; GET CURRENT INPUT CHARACTER 
   06A1 20 0D         [ 3] 1380                     BRA      L880C                        ; DEFAULT TO OCTAL (&O) 
                           1381 
                           1382  .globl L8800
   06A3                    1383 L8800: 
   06A3 81 38         [ 2] 1384                     CMPA     # '8
   06A5 10 22 F9 57   [ 6] 1385                     LBHI     SYNTAX_ERROR 
   06A9 C6 03         [ 2] 1386                     LDB      #0x03                         ; BASE 8 MULTIPLIER 
   06AB 8D 2F         [ 7] 1387                     BSR      L8834                        ; ADD DIGIT TO TEMPORARY ACCUMULATOR 
                           1388 ; E_VABLUATE AN &O _VABRIABLE
                           1389  .globl L880A
   06AD BD 00 AA      [ 8] 1390 L880A:               JSR      GETNCH                       ; GET A CHARACTER FROM BASIC 
                           1391  .globl L880C
   06B0 25 F1         [ 3] 1392 L880C:               BLO      L8800                        ; BRANCH IF NUMERIC 
                           1393  .globl L880E
   06B2 7F 00 00      [ 7] 1394 L880E:               CLR      _FPA0                         ; * CLEAR 2 HIGH ORDER 
   06B5 7F 00 01      [ 7] 1395                     CLR      _FPA0+1                       ; * BYTES OF _FPA0 
                           1396 ;          CLR  _VABLTYP         ; SET _VABRXABLE TYPE TO NUMERIC
   06B8 7F 00 00      [ 7] 1397                     CLR      _FPSBYT                       ; ZERO OUT SUB BYTE OF _FPA0 
   06BB 7F 00 00      [ 7] 1398                     CLR      _FP0SGN                       ; ZERO OUT MANTISSA SIGN OF _FPA0 
   06BE C6 A0         [ 2] 1399                     LDB      #0xA0                         ; * SET EXPONENT OF _FPA0 
   06C0 F7 00 00      [ 5] 1400                     STB      _FP0EXP                       ; * 
   06C3 7E 01 6B      [ 4] 1401                     JMP      LBA1C                        ; GO NORMALIZE _FPA0 
                           1402 
                           1403 ; E_VABLUATE AN &H _VABRIABLE
                           1404  .globl L881F
   06C6 BD 00 AA      [ 8] 1405 L881F:               JSR      GETNCH                       ; GET A CHARACTER FROM BASIC 
   06C9 25 0B         [ 3] 1406                     BLO      L882E                        ; BRANCH IF NUMERIC 
   06CB BD 00 B5      [ 8] 1407                     JSR      LB3A2                        ; SET CARRY IF NOT ALPHA 
   06CE 25 E2         [ 3] 1408                     BLO      L880E                        ; BRANCH IF NOT ALPHA OR NUMERIC 
   06D0 81 47         [ 2] 1409                     CMPA     # 'G                        ; CHECK FOR LETTERS A-F
   06D2 24 DE         [ 3] 1410                     BCC      L880E                        ; BRANCH IF >= G (ILLEGAL HEX LETTER) 
   06D4 80 07         [ 2] 1411                     SUBA     #7                           ; SUBTRACT ASCII DIFFERENCE BETWEEN A AND 9 
                           1412  .globl L882E
   06D6 C6 04         [ 2] 1413 L882E:               LDB      #0x04                         ; BASE 16 DIGIT MULTIPLIER = 2**4 
   06D8 8D 02         [ 7] 1414                     BSR      L8834                        ; ADD DIGIT TO TEMPORARY ACCUMULATOR 
   06DA 20 EA         [ 3] 1415                     BRA      L881F                        ; KEEP E_VABLUATING _VABRIABLE 
                           1416 
                           1417  .globl L8834
   06DC 68 01         [ 7] 1418 L8834:               ASL      0x01,X                        ; * MULTIPLY TEMPORARY 
   06DE 69 84         [ 6] 1419                     ROL      ,X                           ; * ACCUMULATOR BY TWO 
   06E0 10 25 FB 21   [ 6] 1420                     LBCS     LBA92                        ; 'OV' OVERFLOW ERROR 
   06E4 5A            [ 2] 1421                     DECB                                  ; DECREMENT SHIFT COUNTER 
   06E5 26 F5         [ 3] 1422                     BNE      L8834                        ; MULTIPLY TEMPORARY ACCUMULATOR AGAIN 
   06E7 80 30         [ 2] 1423                     SUBA     # '0                        ; MASK OFF ASCII
   06E9 AB 01         [ 5] 1424                     ADDA     0x01,X                        ; * ADD DIGIT TO TEMPORARY 
   06EB A7 01         [ 5] 1425                     STA      0x01,X                        ; * ACCUMULATOR AND SAVE IT 
                           1426  .globl L8845
   06ED 39            [ 5] 1427 L8845:               RTS      
ASxxxx Assembler V05.00  (Motorola 6809), page 1.
Hexidecimal [16-Bits]

Symbol Table

    .__.$$$.       =   2710 L   |     .__.ABS.       =   0000 G
    .__.CPU.       =   0000 L   |     .__.H$L.       =   0001 L
  2 A$float40MS$10     045A GR  |   2 A$float40MS$10     045D GR
  2 A$float40MS$10     045F GR  |   2 A$float40MS$10     0461 GR
  2 A$float40MS$10     0463 GR  |   2 A$float40MS$10     0466 GR
  2 A$float40MS$10     0469 GR  |   2 A$float40MS$10     046C GR
  2 A$float40MS$10     046E GR  |   2 A$float40MS$10     0470 GR
  2 A$float40MS$10     0473 GR  |   2 A$float40MS$10     0476 GR
  2 A$float40MS$10     0479 GR  |   2 A$float40MS$10     047C GR
  2 A$float40MS$10     047F GR  |   2 A$float40MS$10     0482 GR
  2 A$float40MS$10     0485 GR  |   2 A$float40MS$10     0488 GR
  2 A$float40MS$10     0489 GR  |   2 A$float40MS$10     048C GR
  2 A$float40MS$10     048F GR  |   2 A$float40MS$10     0492 GR
  2 A$float40MS$10     0495 GR  |   2 A$float40MS$10     0498 GR
  2 A$float40MS$10     049B GR  |   2 A$float40MS$10     049E GR
  2 A$float40MS$10     04A1 GR  |   2 A$float40MS$10     04A3 GR
  2 A$float40MS$10     04A6 GR  |   2 A$float40MS$10     04A8 GR
  2 A$float40MS$10     04AA GR  |   2 A$float40MS$10     04AD GR
  2 A$float40MS$10     04AF GR  |   2 A$float40MS$10     04B1 GR
  2 A$float40MS$10     04B3 GR  |   2 A$float40MS$10     04B6 GR
  2 A$float40MS$10     04B8 GR  |   2 A$float40MS$10     04BA GR
  2 A$float40MS$10     04BC GR  |   2 A$float40MS$10     04BE GR
  2 A$float40MS$10     04C0 GR  |   2 A$float40MS$10     04C3 GR
  2 A$float40MS$10     04C5 GR  |   2 A$float40MS$10     04C7 GR
  2 A$float40MS$10     04C9 GR  |   2 A$float40MS$10     04CB GR
  2 A$float40MS$10     04CD GR  |   2 A$float40MS$10     04CF GR
  2 A$float40MS$10     04D1 GR  |   2 A$float40MS$10     04D3 GR
  2 A$float40MS$10     04D5 GR  |   2 A$float40MS$10     04D7 GR
  2 A$float40MS$10     04DA GR  |   2 A$float40MS$10     04DD GR
  2 A$float40MS$10     04DF GR  |   2 A$float40MS$10     04E2 GR
  2 A$float40MS$10     04E4 GR  |   2 A$float40MS$10     04E7 GR
  2 A$float40MS$10     04E9 GR  |   2 A$float40MS$10     04EC GR
  2 A$float40MS$10     04EE GR  |   2 A$float40MS$11     04F1 GR
  2 A$float40MS$11     04F4 GR  |   2 A$float40MS$11     04F7 GR
  2 A$float40MS$11     04F9 GR  |   2 A$float40MS$11     04FB GR
  2 A$float40MS$11     04FE GR  |   2 A$float40MS$11     0501 GR
  2 A$float40MS$11     0503 GR  |   2 A$float40MS$11     0505 GR
  2 A$float40MS$11     0508 GR  |   2 A$float40MS$11     050B GR
  2 A$float40MS$11     050D GR  |   2 A$float40MS$11     0510 GR
  2 A$float40MS$11     0514 GR  |   2 A$float40MS$11     0517 GR
  2 A$float40MS$11     051A GR  |   2 A$float40MS$11     051D GR
  2 A$float40MS$11     0520 GR  |   2 A$float40MS$11     0522 GR
  2 A$float40MS$11     0525 GR  |   2 A$float40MS$11     0527 GR
  2 A$float40MS$11     0529 GR  |   2 A$float40MS$11     052B GR
  2 A$float40MS$11     052D GR  |   2 A$float40MS$11     0530 GR
  2 A$float40MS$11     0533 GR  |   2 A$float40MS$11     0536 GR
  2 A$float40MS$11     0539 GR  |   2 A$float40MS$11     053C GR
  2 A$float40MS$11     053D GR  |   2 A$float40MS$11     053E GR
  2 A$float40MS$11     0541 GR  |   2 A$float40MS$11     0542 GR
  2 A$float40MS$11     0544 GR  |   2 A$float40MS$11     0546 GR
  2 A$float40MS$11     0548 GR  |   2 A$float40MS$11     054B GR
  2 A$float40MS$11     055C GR  |   2 A$float40MS$11     055E GR
  2 A$float40MS$11     0561 GR  |   2 A$float40MS$11     0563 GR
  2 A$float40MS$11     0565 GR  |   2 A$float40MS$11     0567 GR
  2 A$float40MS$11     056A GR  |   2 A$float40MS$11     056D GR
  2 A$float40MS$11     056F GR  |   2 A$float40MS$11     0572 GR
  2 A$float40MS$11     0576 GR  |   2 A$float40MS$11     0577 GR
  2 A$float40MS$11     0579 GR  |   2 A$float40MS$11     057B GR
  2 A$float40MS$11     057E GR  |   2 A$float40MS$11     0581 GR
  2 A$float40MS$11     0583 GR  |   2 A$float40MS$12     0586 GR
  2 A$float40MS$12     0589 GR  |   2 A$float40MS$12     058C GR
  2 A$float40MS$12     058E GR  |   2 A$float40MS$12     0591 GR
  2 A$float40MS$12     0594 GR  |   2 A$float40MS$12     0596 GR
  2 A$float40MS$12     0599 GR  |   2 A$float40MS$12     059C GR
  2 A$float40MS$12     059E GR  |   2 A$float40MS$12     05A1 GR
  2 A$float40MS$12     05A4 GR  |   2 A$float40MS$12     05A6 GR
  2 A$float40MS$12     05A9 GR  |   2 A$float40MS$12     05AC GR
  2 A$float40MS$12     05AE GR  |   2 A$float40MS$12     05B1 GR
  2 A$float40MS$12     05B3 GR  |   2 A$float40MS$12     05B5 GR
  2 A$float40MS$12     05B7 GR  |   2 A$float40MS$12     05B9 GR
  2 A$float40MS$12     05BA GR  |   2 A$float40MS$12     05BC GR
  2 A$float40MS$12     05BE GR  |   2 A$float40MS$12     05BF GR
  2 A$float40MS$12     05C0 GR  |   2 A$float40MS$12     05C3 GR
  2 A$float40MS$12     05C6 GR  |   2 A$float40MS$12     05C8 GR
  2 A$float40MS$12     0004 GR  |   2 A$float40MS$12     05CB GR
  2 A$float40MS$12     05CD GR  |   2 A$float40MS$12     05CF GR
  2 A$float40MS$12     05D0 GR  |   2 A$float40MS$12     05D2 GR
  2 A$float40MS$12     05D4 GR  |   2 A$float40MS$12     05D6 GR
  2 A$float40MS$12     05D9 GR  |   2 A$float40MS$12     0007 GR
  2 A$float40MS$12     05DB GR  |   2 A$float40MS$12     05DE GR
  2 A$float40MS$12     05E0 GR  |   2 A$float40MS$12     05E3 GR
  2 A$float40MS$12     05E6 GR  |   2 A$float40MS$12     05E8 GR
  2 A$float40MS$12     05EB GR  |   2 A$float40MS$12     05EE GR
  2 A$float40MS$12     05F0 GR  |   2 A$float40MS$12     05F3 GR
  2 A$float40MS$12     05F6 GR  |   2 A$float40MS$12     05F8 GR
  2 A$float40MS$12     05FB GR  |   2 A$float40MS$12     05FC GR
  2 A$float40MS$12     05FD GR  |   2 A$float40MS$12     05FE GR
  2 A$float40MS$12     0600 GR  |   2 A$float40MS$12     0602 GR
  2 A$float40MS$12     0604 GR  |   2 A$float40MS$12     0605 GR
  2 A$float40MS$12     0607 GR  |   2 A$float40MS$12     0609 GR
  2 A$float40MS$12     060B GR  |   2 A$float40MS$12     060D GR
  2 A$float40MS$12     060F GR  |   2 A$float40MS$12     0612 GR
  2 A$float40MS$12     0614 GR  |   2 A$float40MS$12     0616 GR
  2 A$float40MS$12     0618 GR  |   2 A$float40MS$12     0619 GR
  2 A$float40MS$12     061B GR  |   2 A$float40MS$12     061E GR
  2 A$float40MS$12     0620 GR  |   2 A$float40MS$12     0622 GR
  2 A$float40MS$12     0624 GR  |   2 A$float40MS$12     0626 GR
  2 A$float40MS$12     0628 GR  |   2 A$float40MS$12     062A GR
  2 A$float40MS$13     062C GR  |   2 A$float40MS$13     062E GR
  2 A$float40MS$13     0631 GR  |   2 A$float40MS$13     0633 GR
  2 A$float40MS$13     0635 GR  |   2 A$float40MS$13     0637 GR
  2 A$float40MS$13     0638 GR  |   2 A$float40MS$13     063A GR
  2 A$float40MS$13     063C GR  |   2 A$float40MS$13     0008 GR
  2 A$float40MS$13     063E GR  |   2 A$float40MS$13     0640 GR
  2 A$float40MS$13     0641 GR  |   2 A$float40MS$13     0643 GR
  2 A$float40MS$13     0645 GR  |   2 A$float40MS$13     0647 GR
  2 A$float40MS$13     0649 GR  |   2 A$float40MS$13     064B GR
  2 A$float40MS$13     000B GR  |   2 A$float40MS$13     064D GR
  2 A$float40MS$13     064F GR  |   2 A$float40MS$13     0651 GR
  2 A$float40MS$13     000D GR  |   2 A$float40MS$13     067B GR
  2 A$float40MS$13     067E GR  |   2 A$float40MS$13     0680 GR
  2 A$float40MS$13     0683 GR  |   2 A$float40MS$13     0010 GR
  2 A$float40MS$13     0684 GR  |   2 A$float40MS$13     0686 GR
  2 A$float40MS$13     0688 GR  |   2 A$float40MS$13     0012 GR
  2 A$float40MS$13     068A GR  |   2 A$float40MS$13     068D GR
  2 A$float40MS$13     0690 GR  |   2 A$float40MS$13     0693 GR
  2 A$float40MS$13     0696 GR  |   2 A$float40MS$13     0698 GR
  2 A$float40MS$13     069A GR  |   2 A$float40MS$13     069C GR
  2 A$float40MS$13     069E GR  |   2 A$float40MS$13     06A1 GR
  2 A$float40MS$13     06A3 GR  |   2 A$float40MS$13     06A5 GR
  2 A$float40MS$13     06A9 GR  |   2 A$float40MS$13     06AB GR
  2 A$float40MS$13     06AD GR  |   2 A$float40MS$13     06B0 GR
  2 A$float40MS$13     06B2 GR  |   2 A$float40MS$13     06B5 GR
  2 A$float40MS$13     06B8 GR  |   2 A$float40MS$13     06BB GR
  2 A$float40MS$13     06BE GR  |   2 A$float40MS$14     06C0 GR
  2 A$float40MS$14     06C3 GR  |   2 A$float40MS$14     06C6 GR
  2 A$float40MS$14     06C9 GR  |   2 A$float40MS$14     06CB GR
  2 A$float40MS$14     06CE GR  |   2 A$float40MS$14     06D0 GR
  2 A$float40MS$14     06D2 GR  |   2 A$float40MS$14     06D4 GR
  2 A$float40MS$14     06D6 GR  |   2 A$float40MS$14     06D8 GR
  2 A$float40MS$14     06DA GR  |   2 A$float40MS$14     06DC GR
  2 A$float40MS$14     06DE GR  |   2 A$float40MS$14     0015 GR
  2 A$float40MS$14     06E0 GR  |   2 A$float40MS$14     06E4 GR
  2 A$float40MS$14     06E5 GR  |   2 A$float40MS$14     06E7 GR
  2 A$float40MS$14     06E9 GR  |   2 A$float40MS$14     06EB GR
  2 A$float40MS$14     06ED GR  |   2 A$float40MS$14     0017 GR
  2 A$float40MS$14     0019 GR  |   2 A$float40MS$14     001B GR
  2 A$float40MS$14     001E GR  |   2 A$float40MS$14     0020 GR
  2 A$float40MS$15     0023 GR  |   2 A$float40MS$15     0026 GR
  2 A$float40MS$15     0028 GR  |   2 A$float40MS$15     002B GR
  2 A$float40MS$15     002D GR  |   2 A$float40MS$16     0030 GR
  2 A$float40MS$16     0033 GR  |   2 A$float40MS$16     0035 GR
  2 A$float40MS$16     0038 GR  |   2 A$float40MS$16     003A GR
  2 A$float40MS$17     003D GR  |   2 A$float40MS$17     003F GR
  2 A$float40MS$17     0041 GR  |   2 A$float40MS$17     0043 GR
  2 A$float40MS$17     0046 GR  |   2 A$float40MS$17     0048 GR
  2 A$float40MS$18     004B GR  |   2 A$float40MS$18     004E GR
  2 A$float40MS$18     0050 GR  |   2 A$float40MS$18     0053 GR
  2 A$float40MS$18     0056 GR  |   2 A$float40MS$18     0058 GR
  2 A$float40MS$19     005A GR  |   2 A$float40MS$19     005D GR
  2 A$float40MS$19     0060 GR  |   2 A$float40MS$19     0062 GR
  2 A$float40MS$20     0064 GR  |   2 A$float40MS$20     0067 GR
  2 A$float40MS$20     0069 GR  |   2 A$float40MS$20     006B GR
  2 A$float40MS$21     006C GR  |   2 A$float40MS$21     006F GR
  2 A$float40MS$22     0071 GR  |   2 A$float40MS$22     0074 GR
  2 A$float40MS$22     0076 GR  |   2 A$float40MS$22     0079 GR
  2 A$float40MS$22     007C GR  |   2 A$float40MS$22     007F GR
  2 A$float40MS$22     0082 GR  |   2 A$float40MS$22     0085 GR
  2 A$float40MS$23     008D GR  |   2 A$float40MS$23     0090 GR
  2 A$float40MS$24     0092 GR  |   2 A$float40MS$24     0094 GR
  2 A$float40MS$24     0097 GR  |   2 A$float40MS$24     009A GR
  2 A$float40MS$24     009E GR  |   2 A$float40MS$24     00A1 GR
  2 A$float40MS$24     00A4 GR  |   2 A$float40MS$25     00A5 GR
  2 A$float40MS$25     00A7 GR  |   2 A$float40MS$29     00AA GR
  2 A$float40MS$29     00AC GR  |   2 A$float40MS$29     00AE GR
  2 A$float40MS$30     00B0 GR  |   2 A$float40MS$30     00B2 GR
  2 A$float40MS$30     00B4 GR  |   2 A$float40MS$31     00B5 GR
  2 A$float40MS$31     00B7 GR  |   2 A$float40MS$31     00B9 GR
  2 A$float40MS$31     00BD GR  |   2 A$float40MS$32     00BE GR
  2 A$float40MS$32     00C1 GR  |   2 A$float40MS$33     00C4 GR
  2 A$float40MS$33     00C6 GR  |   2 A$float40MS$33     00C9 GR
  2 A$float40MS$33     00CC GR  |   2 A$float40MS$33     00CE GR
  2 A$float40MS$33     00D0 GR  |   2 A$float40MS$33     00D2 GR
  2 A$float40MS$33     00D5 GR  |   2 A$float40MS$34     00D7 GR
  2 A$float40MS$34     00DA GR  |   2 A$float40MS$34     00DC GR
  2 A$float40MS$34     00DD GR  |   2 A$float40MS$34     00E0 GR
  2 A$float40MS$35     00E2 GR  |   2 A$float40MS$35     00E5 GR
  2 A$float40MS$35     00E8 GR  |   2 A$float40MS$36     00EA GR
  2 A$float40MS$36     00ED GR  |   2 A$float40MS$36     00F0 GR
  2 A$float40MS$36     00F3 GR  |   2 A$float40MS$37     00F5 GR
  2 A$float40MS$37     00F8 GR  |   2 A$float40MS$37     00FB GR
  2 A$float40MS$37     00FD GR  |   2 A$float40MS$38     0100 GR
  2 A$float40MS$38     0101 GR  |   2 A$float40MS$38     0105 GR
  2 A$float40MS$38     0108 GR  |   2 A$float40MS$38     010A GR
  2 A$float40MS$38     010B GR  |   2 A$float40MS$39     010D GR
  2 A$float40MS$39     0110 GR  |   2 A$float40MS$39     0114 GR
  2 A$float40MS$39     0116 GR  |   2 A$float40MS$39     0119 GR
  2 A$float40MS$39     011C GR  |   2 A$float40MS$39     011F GR
  2 A$float40MS$39     0122 GR  |   2 A$float40MS$39     0123 GR
  2 A$float40MS$40     0125 GR  |   2 A$float40MS$40     0127 GR
  2 A$float40MS$40     0128 GR  |   2 A$float40MS$40     012A GR
  2 A$float40MS$40     012D GR  |   2 A$float40MS$40     0130 GR
  2 A$float40MS$40     0132 GR  |   2 A$float40MS$40     0134 GR
  2 A$float40MS$40     0136 GR  |   2 A$float40MS$41     0138 GR
  2 A$float40MS$41     013A GR  |   2 A$float40MS$41     013B GR
  2 A$float40MS$41     013D GR  |   2 A$float40MS$41     0140 GR
  2 A$float40MS$41     0143 GR  |   2 A$float40MS$42     0146 GR
  2 A$float40MS$42     0149 GR  |   2 A$float40MS$42     014C GR
  2 A$float40MS$42     014F GR  |   2 A$float40MS$42     0152 GR
  2 A$float40MS$42     0155 GR  |   2 A$float40MS$42     0158 GR
  2 A$float40MS$42     015B GR  |   2 A$float40MS$42     015E GR
  2 A$float40MS$42     0161 GR  |   2 A$float40MS$43     0164 GR
  2 A$float40MS$43     0165 GR  |   2 A$float40MS$43     0167 GR
  2 A$float40MS$43     0169 GR  |   2 A$float40MS$43     016B GR
  2 A$float40MS$43     016C GR  |   2 A$float40MS$44     016F GR
  2 A$float40MS$44     0171 GR  |   2 A$float40MS$44     0174 GR
  2 A$float40MS$44     0177 GR  |   2 A$float40MS$44     017A GR
  2 A$float40MS$44     017D GR  |   2 A$float40MS$44     0180 GR
  2 A$float40MS$44     0183 GR  |   2 A$float40MS$44     0186 GR
  2 A$float40MS$44     0189 GR  |   2 A$float40MS$45     018C GR
  2 A$float40MS$45     018E GR  |   2 A$float40MS$45     0190 GR
  2 A$float40MS$45     0192 GR  |   2 A$float40MS$45     0193 GR
  2 A$float40MS$45     0196 GR  |   2 A$float40MS$45     0199 GR
  2 A$float40MS$46     019A GR  |   2 A$float40MS$46     019D GR
  2 A$float40MS$46     019E GR  |   2 A$float40MS$46     01A0 GR
  2 A$float40MS$47     01A1 GR  |   2 A$float40MS$47     01A4 GR
  2 A$float40MS$47     01A7 GR  |   2 A$float40MS$47     01AA GR
  2 A$float40MS$47     01AD GR  |   2 A$float40MS$47     01B0 GR
  2 A$float40MS$47     01B2 GR  |   2 A$float40MS$47     01B5 GR
  2 A$float40MS$47     01B7 GR  |   2 A$float40MS$48     01B9 GR
  2 A$float40MS$48     01BC GR  |   2 A$float40MS$48     01BF GR
  2 A$float40MS$48     01C1 GR  |   2 A$float40MS$49     01C4 GR
  2 A$float40MS$49     01C6 GR  |   2 A$float40MS$49     01C9 GR
  2 A$float40MS$49     01CB GR  |   2 A$float40MS$49     01CE GR
  2 A$float40MS$49     01D0 GR  |   2 A$float40MS$49     01D3 GR
  2 A$float40MS$49     01D6 GR  |   2 A$float40MS$50     01D9 GR
  2 A$float40MS$50     01DC GR  |   2 A$float40MS$50     01DE GR
  2 A$float40MS$50     01E0 GR  |   2 A$float40MS$50     01E2 GR
  2 A$float40MS$51     01E3 GR  |   2 A$float40MS$51     01E6 GR
  2 A$float40MS$51     01E9 GR  |   2 A$float40MS$51     01EC GR
  2 A$float40MS$51     01EF GR  |   2 A$float40MS$51     01F2 GR
  2 A$float40MS$51     01F5 GR  |   2 A$float40MS$52     01F7 GR
  2 A$float40MS$52     01FA GR  |   2 A$float40MS$52     01FC GR
  2 A$float40MS$52     01FF GR  |   2 A$float40MS$52     0201 GR
  2 A$float40MS$52     0204 GR  |   2 A$float40MS$52     0205 GR
  2 A$float40MS$53     0207 GR  |   2 A$float40MS$53     020A GR
  2 A$float40MS$54     020D GR  |   2 A$float40MS$54     020F GR
  2 A$float40MS$54     0212 GR  |   2 A$float40MS$54     0214 GR
  2 A$float40MS$54     0216 GR  |   2 A$float40MS$54     0218 GR
  2 A$float40MS$54     021A GR  |   2 A$float40MS$54     021C GR
  2 A$float40MS$54     021E GR  |   2 A$float40MS$54     0221 GR
  2 A$float40MS$55     0223 GR  |   2 A$float40MS$55     0225 GR
  2 A$float40MS$55     0227 GR  |   2 A$float40MS$55     022A GR
  2 A$float40MS$55     022C GR  |   2 A$float40MS$55     022E GR
  2 A$float40MS$55     0230 GR  |   2 A$float40MS$56     0232 GR
  2 A$float40MS$56     0234 GR  |   2 A$float40MS$56     0236 GR
  2 A$float40MS$56     0237 GR  |   2 A$float40MS$56     0238 GR
  2 A$float40MS$56     023A GR  |   2 A$float40MS$57     0240 GR
  2 A$float40MS$57     0243 GR  |   2 A$float40MS$58     0245 GR
  2 A$float40MS$58     0248 GR  |   2 A$float40MS$58     024C GR
  2 A$float40MS$58     024F GR  |   2 A$float40MS$59     0251 GR
  2 A$float40MS$59     0254 GR  |   2 A$float40MS$59     0257 GR
  2 A$float40MS$59     025A GR  |   2 A$float40MS$59     025D GR
  2 A$float40MS$59     0260 GR  |   2 A$float40MS$59     0262 GR
  2 A$float40MS$59     0265 GR  |   2 A$float40MS$59     0268 GR
  2 A$float40MS$59     026B GR  |   2 A$float40MS$60     026D GR
  2 A$float40MS$60     0270 GR  |   2 A$float40MS$60     0273 GR
  2 A$float40MS$60     0276 GR  |   2 A$float40MS$60     0278 GR
  2 A$float40MS$60     027B GR  |   2 A$float40MS$60     027E GR
  2 A$float40MS$60     0281 GR  |   2 A$float40MS$60     0283 GR
  2 A$float40MS$60     0286 GR  |   2 A$float40MS$61     0289 GR
  2 A$float40MS$61     028C GR  |   2 A$float40MS$61     028F GR
  2 A$float40MS$61     0293 GR  |   2 A$float40MS$62     0294 GR
  2 A$float40MS$62     0297 GR  |   2 A$float40MS$62     0298 GR
  2 A$float40MS$62     029A GR  |   2 A$float40MS$62     029C GR
  2 A$float40MS$62     029F GR  |   2 A$float40MS$62     02A2 GR
  2 A$float40MS$62     02A5 GR  |   2 A$float40MS$62     02A8 GR
  2 A$float40MS$63     02AB GR  |   2 A$float40MS$63     02AE GR
  2 A$float40MS$63     02B1 GR  |   2 A$float40MS$63     02B4 GR
  2 A$float40MS$63     02B7 GR  |   2 A$float40MS$63     02BA GR
  2 A$float40MS$63     02BD GR  |   2 A$float40MS$63     02BE GR
  2 A$float40MS$63     02C1 GR  |   2 A$float40MS$64     02C4 GR
  2 A$float40MS$64     02C7 GR  |   2 A$float40MS$64     02CA GR
  2 A$float40MS$64     02CD GR  |   2 A$float40MS$64     02CE GR
  2 A$float40MS$64     02D0 GR  |   2 A$float40MS$65     02D1 GR
  2 A$float40MS$65     02D3 GR  |   2 A$float40MS$65     02D6 GR
  2 A$float40MS$65     02D8 GR  |   2 A$float40MS$65     02DB GR
  2 A$float40MS$65     02DE GR  |   2 A$float40MS$66     02E1 GR
  2 A$float40MS$66     02E4 GR  |   2 A$float40MS$66     02E6 GR
  2 A$float40MS$66     02E9 GR  |   2 A$float40MS$66     02EB GR
  2 A$float40MS$66     02EE GR  |   2 A$float40MS$66     02F1 GR
  2 A$float40MS$67     02F2 GR  |   2 A$float40MS$67     02F3 GR
  2 A$float40MS$67     02F5 GR  |   2 A$float40MS$67     02F8 GR
  2 A$float40MS$67     02F9 GR  |   2 A$float40MS$67     02FA GR
  2 A$float40MS$67     02FC GR  |   2 A$float40MS$67     02FE GR
  2 A$float40MS$68     0301 GR  |   2 A$float40MS$68     0303 GR
  2 A$float40MS$68     0306 GR  |   2 A$float40MS$68     0309 GR
  2 A$float40MS$68     030A GR  |   2 A$float40MS$68     030D GR
  2 A$float40MS$69     030E GR  |   2 A$float40MS$69     0310 GR
  2 A$float40MS$69     0312 GR  |   2 A$float40MS$69     0316 GR
  2 A$float40MS$70     0319 GR  |   2 A$float40MS$70     031C GR
  2 A$float40MS$70     031E GR  |   2 A$float40MS$70     0320 GR
  2 A$float40MS$70     0322 GR  |   2 A$float40MS$70     0325 GR
  2 A$float40MS$70     0328 GR  |   2 A$float40MS$70     032B GR
  2 A$float40MS$71     032D GR  |   2 A$float40MS$71     0333 GR
  2 A$float40MS$71     0336 GR  |   2 A$float40MS$71     0339 GR
  2 A$float40MS$72     033A GR  |   2 A$float40MS$72     033D GR
  2 A$float40MS$81     0340 GR  |   2 A$float40MS$81     0343 GR
  2 A$float40MS$81     0346 GR  |   2 A$float40MS$81     0349 GR
  2 A$float40MS$82     034C GR  |   2 A$float40MS$82     034F GR
  2 A$float40MS$82     0350 GR  |   2 A$float40MS$82     0352 GR
  2 A$float40MS$82     0354 GR  |   2 A$float40MS$83     0357 GR
  2 A$float40MS$83     0359 GR  |   2 A$float40MS$83     035C GR
  2 A$float40MS$83     035F GR  |   2 A$float40MS$83     0361 GR
  2 A$float40MS$83     0363 GR  |   2 A$float40MS$83     0366 GR
  2 A$float40MS$83     0369 GR  |   2 A$float40MS$83     036B GR
  2 A$float40MS$84     036E GR  |   2 A$float40MS$84     0370 GR
  2 A$float40MS$84     0373 GR  |   2 A$float40MS$85     0000 GR
  2 A$float40MS$85     0376 GR  |   2 A$float40MS$85     0378 GR
  2 A$float40MS$85     037B GR  |   2 A$float40MS$85     037D GR
  2 A$float40MS$85     0380 GR  |   2 A$float40MS$85     0382 GR
  2 A$float40MS$85     0385 GR  |   2 A$float40MS$85     0387 GR
  2 A$float40MS$85     038A GR  |   2 A$float40MS$85     038C GR
  2 A$float40MS$86     0003 GR  |   2 A$float40MS$86     038D GR
  2 A$float40MS$86     0390 GR  |   2 A$float40MS$86     0393 GR
  2 A$float40MS$86     0396 GR  |   2 A$float40MS$87     0399 GR
  2 A$float40MS$87     039C GR  |   2 A$float40MS$87     039F GR
  2 A$float40MS$87     03A2 GR  |   2 A$float40MS$87     03A5 GR
  2 A$float40MS$87     03A8 GR  |   2 A$float40MS$87     03AB GR
  2 A$float40MS$88     03AC GR  |   2 A$float40MS$88     03AF GR
  2 A$float40MS$88     03B2 GR  |   2 A$float40MS$88     03B5 GR
  2 A$float40MS$88     03B8 GR  |   2 A$float40MS$88     03BB GR
  2 A$float40MS$88     03BE GR  |   2 A$float40MS$88     03BF GR
  2 A$float40MS$89     03C0 GR  |   2 A$float40MS$89     03C3 GR
  2 A$float40MS$89     03C5 GR  |   2 A$float40MS$89     03C8 GR
  2 A$float40MS$90     03C9 GR  |   2 A$float40MS$90     03CB GR
  2 A$float40MS$90     03CD GR  |   2 A$float40MS$90     03CE GR
  2 A$float40MS$90     03CF GR  |   2 A$float40MS$91     03D1 GR
  2 A$float40MS$91     03D4 GR  |   2 A$float40MS$91     03D7 GR
  2 A$float40MS$91     03D9 GR  |   2 A$float40MS$91     03DC GR
  2 A$float40MS$91     03DE GR  |   2 A$float40MS$91     03E1 GR
  2 A$float40MS$92     03E4 GR  |   2 A$float40MS$92     03E7 GR
  2 A$float40MS$92     03EA GR  |   2 A$float40MS$92     03ED GR
  2 A$float40MS$92     03F0 GR  |   2 A$float40MS$92     03F3 GR
  2 A$float40MS$93     03F4 GR  |   2 A$float40MS$93     03F6 GR
  2 A$float40MS$93     03F8 GR  |   2 A$float40MS$93     03FA GR
  2 A$float40MS$93     03FD GR  |   2 A$float40MS$94     03FF GR
  2 A$float40MS$94     0402 GR  |   2 A$float40MS$94     0404 GR
  2 A$float40MS$94     0406 GR  |   2 A$float40MS$94     0408 GR
  2 A$float40MS$94     040A GR  |   2 A$float40MS$94     040D GR
  2 A$float40MS$95     040F GR  |   2 A$float40MS$95     0411 GR
  2 A$float40MS$95     0414 GR  |   2 A$float40MS$95     0416 GR
  2 A$float40MS$95     0418 GR  |   2 A$float40MS$95     041B GR
  2 A$float40MS$95     041D GR  |   2 A$float40MS$95     041F GR
  2 A$float40MS$95     0422 GR  |   2 A$float40MS$95     0424 GR
  2 A$float40MS$96     0426 GR  |   2 A$float40MS$96     0427 GR
  2 A$float40MS$96     0428 GR  |   2 A$float40MS$96     042B GR
  2 A$float40MS$97     042D GR  |   2 A$float40MS$97     0430 GR
  2 A$float40MS$97     0432 GR  |   2 A$float40MS$97     0434 GR
  2 A$float40MS$97     0437 GR  |   2 A$float40MS$97     0439 GR
  2 A$float40MS$97     043C GR  |   2 A$float40MS$98     043F GR
  2 A$float40MS$98     0442 GR  |   2 A$float40MS$98     0444 GR
  2 A$float40MS$98     0446 GR  |   2 A$float40MS$98     0449 GR
  2 A$float40MS$98     044C GR  |   2 A$float40MS$98     044D GR
  2 A$float40MS$99     0450 GR  |   2 A$float40MS$99     0453 GR
  2 A$float40MS$99     0454 GR  |   2 A$float40MS$99     0457 GR
  2 ABS                03F0 GR  |   2 BROMHK             00AC GR
  2 DToF0              006C GR  |   2 ERROR_HANDLER      0000 GR
  2 F0ToD              008D GR  |   2 F0ToPacked         00BE GR
  2 F0toF1             03AC GR  |   2 F0toXPacked        00C1 GR
  2 F0toa              055C GR  |   2 F1toF0             038D GR
  2 GETCCH             00AA GR  |   2 GETNCH             00AA GR
  2 INT                045A R   |   2 INTCNV             008D R
  2 L87EB              068A GR  |   2 L8800              06A3 GR
  2 L880A              06AD GR  |   2 L880C              06B0 GR
  2 L880E              06B2 GR  |   2 L881F              06C6 GR
  2 L882E              06D6 GR  |   2 L8834              06DC GR
  2 L8845              06ED GR  |   2 LAA24              00B0 GR
  2 LAA28              00B4 GR  |   2 LB3A2              00B5 GR
  2 LB3AA              00BD GR  |   2 LB3DF              0088 R
  2 LB3FE              009E R   |   2 LB44A              00A5 R
  2 LB9B4              00DD GR  |   2 LB9B9              00EA GR
  2 LB9BC              00ED GR  |   2 LB9C2              00FD GR
  2 LB9C5              0100 GR  |   2 LB9CD              0108 GR
  2 LB9E2              0123 GR  |   2 LB9EC              012D GR
  2 LB9FB              013D GR  |   2 LBA18              0167 GR
  2 LBA1C              016B GR  |   2 LBA1D              016C GR
  2 LBA39              0192 GR  |   2 LBA3A              0193 GR
  2 LBA3E              0199 GR  |   2 LBA3F              019A GR
  2 LBA44              01A0 GR  |   2 LBA4F              01B0 GR
  2 LBA5C              01BF GR  |   2 LBA66              01CB GR
  2 LBA72              01DC GR  |   2 LBA78              01E2 GR
  2 LBA79              01E3 GR  |   2 LBA7B              01E6 GR
  2 LBA83              01F2 GR  |   2 LBA91              0204 GR
  2 LBA92              0205 GR  |   2 LBA97              020A GR
  2 LBA9A              020D GR  |   2 LBAAE              0223 GR
  2 LBAB8              022E GR  |   2 LBABA              0230 GR
  2 LBAC4              023A GR  |   2 LBAC5              023B GR
  2 LBACA              0245 GR  |   2 LBACC              0248 GR
  2 LBAD0              024F GR  |   2 LBB00              028F GR
  2 LBB02              0293 GR  |   2 LBB03              0294 GR
  2 LBB20              02BD GR  |   2 LBB2E              02D0 GR
  2 LBB2F              02D1 GR  |   2 LBB48              02F2 GR
  2 LBB5C              030A GR  |   2 LBB61              0310 GR
  2 LBB63              0312 GR  |   2 LBB67              0316 GR
  2 LBB6A              0319 GR  |   2 LBB7C              032D GR
  2 LBB7D              032E GR  |   2 LBB82              0333 GR
  2 LBB89              033A GR  |   2 LBC0B              0343 GR
  2 LBC14              0350 GR  |   2 LBC2A              036B GR
  2 LBC2F              0370 GR  |   2 LBC35              0373 GR
  2 LBC4A              038D GR  |   2 LBC4C              0390 GR
  2 LBC5F              03AC GR  |   2 LBC6D              03C0 GR
  2 LBC71              03C5 GR  |   2 LBC73              03C8 GR
  2 LBC79              03CE GR  |   2 LBC7C              03D1 GR
  2 LBC82              03D9 GR  |   2 LBC86              03DE GR
  2 LBC96              03F4 GR  |   2 LBCA0              03FF GR
  2 LBCC3              0427 GR  |   2 LBCC8              042D GR
  2 LBCD7              043F GR  |   2 LBCE4              044D GR
  2 LBD09              047C GR  |   2 LBD11              0488 GR
  2 LBD12              0489 GR  |   2 LBD25              04A6 GR
  2 LBD2D              04AF GR  |   2 LBD31              04B3 GR
  2 LBD35              04B8 GR  |   2 LBD53              04D7 GR
  2 LBD55              04DA GR  |   2 LBD59              04DF GR
  2 LBD61              04E9 GR  |   2 LBD65              04EE GR
  2 LBD6F              04FB GR  |   2 LBD78              0505 GR
  2 LBD7F              050D GR  |   2 LBD86              0517 GR
  2 LBD99              052D GR  |   2 LBDA5              0539 GR
  2 LBDB6              054D GR  |   2 LBDBB              0552 GR
  2 LBDC0              0557 GR  |   2 LBDDC              055C GR
  2 LBDE4              0565 GR  |   2 LBDFF              0583 GR
  2 LBE01              0586 GR  |   2 LBE09              058E GR
  2 LBE18              059E GR  |   2 LBE1F              05A6 GR
  2 LBE36              05BE GR  |   2 LBE4B              05D6 GR
  2 LBE50              05DB GR  |   2 LBE72              0605 GR
  2 LBE84              0618 GR  |   2 LBE8C              0620 GR
  2 LBE98              062C GR  |   2 LBEA3              0638 GR
  2 LBEAB              0640 GR  |   2 LBEB8              064D GR
  2 LBEBA              064F GR  |   2 LBEBC              0651 GR
  2 LBEC0              0652 GR  |   2 LBEC5              0657 GR
  2 LBEC9              065B GR  |   2 LBECD              065F GR
  2 LBED1              0663 GR  |   2 LBED5              0667 GR
  2 LBED9              066B GR  |   2 LBEDD              066F GR
  2 LBEE1              0673 GR  |   2 LBEE5              0677 GR
  2 LBEE9              067B GR  |   2 LBEEF              0683 GR
  2 RTS0               00B4 GR  |   2 SGN                03CF GR
    SKP2           =   008C     |     SPACE          =   0020 
  2 SYNTAX_ERROR       0000 GR  |   2 XVEC19             0684 GR
    _CHARAC            **** GX  |     _COEFCT            **** GX
    _COEFPT            **** GX  |     _FP0EXP            **** GX
    _FP0SGN            **** GX  |     _FP1EXP            **** GX
    _FP1SGN            **** GX  |     _FPA0              **** GX
    _FPA1              **** GX  |     _FPA2              **** GX
    _FPCARY            **** GX  |     _FPSBYT            **** GX
    _RESSGN            **** GX  |     _V40               **** GX
    _V45               **** GX  |     _V46               **** GX
    _V47               **** GX  |     _V48               **** GX
    _VAB               **** GX  |     _VAC               **** GX
    _VAD               **** GX  |     _VAE               **** GX
  2 _addF              0030 GR  |   2 _addIF             003D GR
  2 _fToStr            0008 GR  |   2 _fToStr2           0010 GR
    _floatError        **** GX  |   2 _initFP            0004 GR
  2 _intF              005A GR  |   2 _mulF              0023 GR
  2 _mulIF             0015 GR  |   2 _subF              004B GR
  2 _toInt             0064 GR  |   2 _toInt2            045A GR
  2 addF0To            00FD GR  |   2 addF0toF1          00F5 GR
  2 atoF0              0489 GR  |   2 mulF0F1            0240 GR
  2 mulF0x             0245 GR  |   2 negative           00D0 GR
  2 packedToF0         0350 GR  |   2 packedToF1         02D1 GR
  2 subF0From          00EA GR  |   2 subF0FromF1        00E2 GR

ASxxxx Assembler V05.00  (Motorola 6809), page 2.
Hexidecimal [16-Bits]

Area Table

[_CSEG]
   0 _CODE            size    0   flags C080
   2 .text            size  6EE   flags  100
   3 .bss             size    0   flags    0
[_DSEG]
   1 _DATA            size    0   flags C0C0

